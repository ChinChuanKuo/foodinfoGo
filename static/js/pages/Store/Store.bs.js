// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE

import * as List from "bs-platform/lib/es6/list.js";
import * as $$Array from "bs-platform/lib/es6/array.js";
import * as Block from "bs-platform/lib/es6/block.js";
import * as Curry from "bs-platform/lib/es6/curry.js";
import * as React from "react";
import * as Caml_obj from "bs-platform/lib/es6/caml_obj.js";
import * as Caml_array from "bs-platform/lib/es6/caml_array.js";
import * as ReactIntl from "react-intl";
import * as Tab$BtsCore from "../../material-ui/core/Tabs/Tab.bs.js";
import * as Data$BtsCore from "../../features/Data.bs.js";
import * as Path$BtsCore from "../../features/Path.bs.js";
import * as Tabs$BtsCore from "../../material-ui/core/Tabs/Tabs.bs.js";
import * as Icons$BtsCore from "../../material-ui/icon/Icons.bs.js";
import * as Button$BtsCore from "../../material-ui/core/Button/Button.bs.js";
import * as Status$BtsCore from "../../features/Status.bs.js";
import * as Switch$BtsCore from "../../material-ui/core/Switch/Switch.bs.js";
import * as Axiosapi$BtsCore from "../../features/Axiosapi.bs.js";
import * as GridItem$BtsCore from "../../material-ui/core/Grid/GridItem.bs.js";
import * as MenuItem$BtsCore from "../../material-ui/core/MenuItem/MenuItem.bs.js";
import * as Together$BtsCore from "../../styles/Together/Together.bs.js";
import * as ReasonReactRouter from "reason-react/src/ReasonReactRouter.js";
import * as IconAction$BtsCore from "../../material-ui/core/IconStyle/IconAction.bs.js";
import * as IconButton$BtsCore from "../../material-ui/core/IconButton/IconButton.bs.js";
import * as SelectMenu$BtsCore from "../../material-ui/core/Menu/SelectMenu.bs.js";
import * as Typography$BtsCore from "../../material-ui/core/Typography/Typography.bs.js";
import * as AnswerColor$BtsCore from "../../controls/AnswerColor.bs.js";
import * as IconGeneral$BtsCore from "../../material-ui/core/IconStyle/IconGeneral.bs.js";
import * as ImageUpload$BtsCore from "../../example/Uploads/ImageUpload.bs.js";
import * as NewFacetube$BtsCore from "../../example/Facebook/NewFacetube.bs.js";
import * as SwitchColor$BtsCore from "../../controls/SwitchColor.bs.js";
import * as GridContainer$BtsCore from "../../material-ui/core/Grid/GridContainer.bs.js";
import * as IconAnimation$BtsCore from "../../controls/IconAnimation.bs.js";
import * as SelectStandard$BtsCore from "../../material-ui/core/Select/SelectStandard.bs.js";
import * as BackgroundBoard$BtsCore from "../../example/Boards/BackgroundBoard.bs.js";
import * as SnackbarYoutube$BtsCore from "../../material-ui/core/Snackbar/SnackbarYoutube.bs.js";
import * as TextFieldStandard$BtsCore from "../../material-ui/core/TextField/TextFieldStandard.bs.js";
import * as TextFieldMultiline$BtsCore from "../../material-ui/core/TextField/TextFieldMultiline.bs.js";

((require('../../../scss/pages/Together/together.scss')));

function reducer(state, action) {
  if (typeof action === "number") {
    switch (action) {
      case /* SettingError */0 :
          return {
                  formLoad: state.formLoad,
                  showProgress: state.showProgress,
                  error: !state.error,
                  insert: state.insert,
                  update: state.update,
                  delete: state.delete,
                  export: state.export,
                  formId: state.formId,
                  tile: state.tile,
                  desc: state.desc,
                  checked: state.checked,
                  tabitems: state.tabitems,
                  index: state.index,
                  items: state.items,
                  showYoutube: state.showYoutube,
                  youtubeText: state.youtubeText
                };
      case /* ActionShowProgress */1 :
          return {
                  formLoad: state.formLoad,
                  showProgress: !state.showProgress,
                  error: state.error,
                  insert: state.insert,
                  update: state.update,
                  delete: state.delete,
                  export: state.export,
                  formId: state.formId,
                  tile: state.tile,
                  desc: state.desc,
                  checked: state.checked,
                  tabitems: state.tabitems,
                  index: state.index,
                  items: state.items,
                  showYoutube: state.showYoutube,
                  youtubeText: state.youtubeText
                };
      case /* ShowChecked */2 :
          return {
                  formLoad: state.formLoad,
                  showProgress: state.showProgress,
                  error: state.error,
                  insert: state.insert,
                  update: state.update,
                  delete: state.delete,
                  export: state.export,
                  formId: state.formId,
                  tile: state.tile,
                  desc: state.desc,
                  checked: !state.checked,
                  tabitems: state.tabitems,
                  index: state.index,
                  items: state.items,
                  showYoutube: state.showYoutube,
                  youtubeText: state.youtubeText
                };
      
    }
  } else {
    switch (action.tag | 0) {
      case /* SettingFormLoad */0 :
          return {
                  formLoad: !state.formLoad,
                  showProgress: state.showProgress,
                  error: state.error,
                  insert: state.insert,
                  update: state.update,
                  delete: state.delete,
                  export: state.export,
                  formId: action[0],
                  tile: state.tile,
                  desc: state.desc,
                  checked: state.checked,
                  tabitems: state.tabitems,
                  index: state.index,
                  items: state.items,
                  showYoutube: state.showYoutube,
                  youtubeText: state.youtubeText
                };
      case /* ActionPermissItems */1 :
          return {
                  formLoad: state.formLoad,
                  showProgress: state.showProgress,
                  error: state.error,
                  insert: action[0],
                  update: action[1],
                  delete: action[2],
                  export: action[3],
                  formId: state.formId,
                  tile: state.tile,
                  desc: state.desc,
                  checked: state.checked,
                  tabitems: state.tabitems,
                  index: state.index,
                  items: state.items,
                  showYoutube: state.showYoutube,
                  youtubeText: state.youtubeText
                };
      case /* SettingFormItems */2 :
          return {
                  formLoad: state.formLoad,
                  showProgress: state.showProgress,
                  error: state.error,
                  insert: state.insert,
                  update: state.update,
                  delete: state.delete,
                  export: state.export,
                  formId: state.formId,
                  tile: action[0],
                  desc: action[1],
                  checked: action[2],
                  tabitems: state.tabitems,
                  index: state.index,
                  items: action[3],
                  showYoutube: state.showYoutube,
                  youtubeText: state.youtubeText
                };
      case /* ChangeFormTitle */3 :
          return {
                  formLoad: state.formLoad,
                  showProgress: state.showProgress,
                  error: state.error,
                  insert: state.insert,
                  update: state.update,
                  delete: state.delete,
                  export: state.export,
                  formId: state.formId,
                  tile: action[0],
                  desc: state.desc,
                  checked: state.checked,
                  tabitems: state.tabitems,
                  index: state.index,
                  items: state.items,
                  showYoutube: state.showYoutube,
                  youtubeText: state.youtubeText
                };
      case /* ChangeFormDescription */4 :
          return {
                  formLoad: state.formLoad,
                  showProgress: state.showProgress,
                  error: state.error,
                  insert: state.insert,
                  update: state.update,
                  delete: state.delete,
                  export: state.export,
                  formId: state.formId,
                  tile: state.tile,
                  desc: action[0],
                  checked: state.checked,
                  tabitems: state.tabitems,
                  index: state.index,
                  items: state.items,
                  showYoutube: state.showYoutube,
                  youtubeText: state.youtubeText
                };
      case /* ClickItemTab */5 :
          var index = action[0];
          return {
                  formLoad: state.formLoad,
                  showProgress: state.showProgress,
                  error: state.error,
                  insert: state.insert,
                  update: state.update,
                  delete: state.delete,
                  export: state.export,
                  formId: state.formId,
                  tile: state.tile,
                  desc: state.desc,
                  checked: state.checked,
                  tabitems: List.mapi((function (i, tabtitem) {
                          return {
                                  showTabt: index === i,
                                  tabImage: tabtitem.tabImage,
                                  tabPath: tabtitem.tabPath
                                };
                        }), state.tabitems),
                  index: index,
                  items: state.items,
                  showYoutube: state.showYoutube,
                  youtubeText: state.youtubeText
                };
      case /* ShowTypeDrop */6 :
          var index$1 = action[1];
          var droped = action[0];
          return {
                  formLoad: state.formLoad,
                  showProgress: state.showProgress,
                  error: state.error,
                  insert: state.insert,
                  update: state.update,
                  delete: state.delete,
                  export: state.export,
                  formId: state.formId,
                  tile: state.tile,
                  desc: state.desc,
                  checked: state.checked,
                  tabitems: state.tabitems,
                  index: state.index,
                  items: $$Array.mapi((function (i, item) {
                          if (index$1 !== i) {
                            return item;
                          }
                          var newrecord = Caml_obj.caml_obj_dup(item);
                          newrecord.showTypeDrop = droped;
                          return newrecord;
                        }), state.items),
                  showYoutube: state.showYoutube,
                  youtubeText: state.youtubeText
                };
      case /* ShowTypeFile */7 :
          var index$2 = action[1];
          var value = action[0];
          return {
                  formLoad: state.formLoad,
                  showProgress: state.showProgress,
                  error: state.error,
                  insert: state.insert,
                  update: state.update,
                  delete: state.delete,
                  export: state.export,
                  formId: state.formId,
                  tile: state.tile,
                  desc: state.desc,
                  checked: state.checked,
                  tabitems: state.tabitems,
                  index: state.index,
                  items: $$Array.mapi((function (i, item) {
                          if (index$2 !== i) {
                            return item;
                          }
                          var newrecord = Caml_obj.caml_obj_dup(item);
                          newrecord.typeValue = value;
                          newrecord.showTypeFile = !item.showTypeFile;
                          return newrecord;
                        }), state.items),
                  showYoutube: state.showYoutube,
                  youtubeText: state.youtubeText
                };
      case /* ChangeItemType */8 :
          var index$3 = action[1];
          var value$1 = action[0];
          return {
                  formLoad: state.formLoad,
                  showProgress: state.showProgress,
                  error: state.error,
                  insert: state.insert,
                  update: state.update,
                  delete: state.delete,
                  export: state.export,
                  formId: state.formId,
                  tile: state.tile,
                  desc: state.desc,
                  checked: state.checked,
                  tabitems: state.tabitems,
                  index: state.index,
                  items: $$Array.mapi((function (i, item) {
                          if (index$3 !== i) {
                            return item;
                          }
                          var newrecord = Caml_obj.caml_obj_dup(item);
                          newrecord.typeValue = value$1;
                          return newrecord;
                        }), state.items),
                  showYoutube: state.showYoutube,
                  youtubeText: state.youtubeText
                };
      case /* ShowTypeMenu */9 :
          var index$4 = action[0];
          return {
                  formLoad: state.formLoad,
                  showProgress: state.showProgress,
                  error: state.error,
                  insert: state.insert,
                  update: state.update,
                  delete: state.delete,
                  export: state.export,
                  formId: state.formId,
                  tile: state.tile,
                  desc: state.desc,
                  checked: state.checked,
                  tabitems: state.tabitems,
                  index: state.index,
                  items: $$Array.mapi((function (i, item) {
                          if (index$4 !== i) {
                            return item;
                          }
                          var newrecord = Caml_obj.caml_obj_dup(item);
                          newrecord.showTypeMenu = !item.showTypeMenu;
                          return newrecord;
                        }), state.items),
                  showYoutube: state.showYoutube,
                  youtubeText: state.youtubeText
                };
      case /* ClickTypeMenu */10 :
          var index$5 = action[1];
          var value$2 = action[0];
          return {
                  formLoad: state.formLoad,
                  showProgress: state.showProgress,
                  error: state.error,
                  insert: state.insert,
                  update: state.update,
                  delete: state.delete,
                  export: state.export,
                  formId: state.formId,
                  tile: state.tile,
                  desc: state.desc,
                  checked: state.checked,
                  tabitems: state.tabitems,
                  index: state.index,
                  items: $$Array.mapi((function (i, item) {
                          if (index$5 !== i) {
                            return item;
                          }
                          var newrecord = Caml_obj.caml_obj_dup(item);
                          newrecord.showTypeMenu = !item.showTypeMenu;
                          newrecord.typeValue = value$2;
                          return newrecord;
                        }), state.items),
                  showYoutube: state.showYoutube,
                  youtubeText: state.youtubeText
                };
      case /* ClickTypeRadio */11 :
          var index$6 = action[1];
          var rindex = action[0];
          return {
                  formLoad: state.formLoad,
                  showProgress: state.showProgress,
                  error: state.error,
                  insert: state.insert,
                  update: state.update,
                  delete: state.delete,
                  export: state.export,
                  formId: state.formId,
                  tile: state.tile,
                  desc: state.desc,
                  checked: state.checked,
                  tabitems: state.tabitems,
                  index: state.index,
                  items: $$Array.mapi((function (i, item) {
                          if (index$6 !== i) {
                            return item;
                          }
                          var newrecord = Caml_obj.caml_obj_dup(item);
                          newrecord.typeanswitems = $$Array.mapi((function (ri, answeritem) {
                                  return {
                                          id: answeritem.id,
                                          value: answeritem.value,
                                          showAnswer: rindex === ri ? !answeritem.showAnswer : false
                                        };
                                }), item.typeanswitems);
                          return newrecord;
                        }), state.items),
                  showYoutube: state.showYoutube,
                  youtubeText: state.youtubeText
                };
      case /* ClickTypeCheckbox */12 :
          var index$7 = action[1];
          var rindex$1 = action[0];
          return {
                  formLoad: state.formLoad,
                  showProgress: state.showProgress,
                  error: state.error,
                  insert: state.insert,
                  update: state.update,
                  delete: state.delete,
                  export: state.export,
                  formId: state.formId,
                  tile: state.tile,
                  desc: state.desc,
                  checked: state.checked,
                  tabitems: state.tabitems,
                  index: state.index,
                  items: $$Array.mapi((function (i, item) {
                          if (index$7 !== i) {
                            return item;
                          }
                          var newrecord = Caml_obj.caml_obj_dup(item);
                          newrecord.typeanswitems = $$Array.mapi((function (ri, answeritem) {
                                  if (rindex$1 === ri) {
                                    return {
                                            id: answeritem.id,
                                            value: answeritem.value,
                                            showAnswer: !answeritem.showAnswer
                                          };
                                  } else {
                                    return answeritem;
                                  }
                                }), item.typeanswitems);
                          return newrecord;
                        }), state.items),
                  showYoutube: state.showYoutube,
                  youtubeText: state.youtubeText
                };
      case /* ShowPhoneDrop */13 :
          var index$8 = action[1];
          var droped$1 = action[0];
          return {
                  formLoad: state.formLoad,
                  showProgress: state.showProgress,
                  error: state.error,
                  insert: state.insert,
                  update: state.update,
                  delete: state.delete,
                  export: state.export,
                  formId: state.formId,
                  tile: state.tile,
                  desc: state.desc,
                  checked: state.checked,
                  tabitems: state.tabitems,
                  index: state.index,
                  items: $$Array.mapi((function (i, item) {
                          if (index$8 !== i) {
                            return item;
                          }
                          var newrecord = Caml_obj.caml_obj_dup(item);
                          newrecord.showPhoneDrop = droped$1;
                          return newrecord;
                        }), state.items),
                  showYoutube: state.showYoutube,
                  youtubeText: state.youtubeText
                };
      case /* ShowPhoneFile */14 :
          var index$9 = action[1];
          var value$3 = action[0];
          return {
                  formLoad: state.formLoad,
                  showProgress: state.showProgress,
                  error: state.error,
                  insert: state.insert,
                  update: state.update,
                  delete: state.delete,
                  export: state.export,
                  formId: state.formId,
                  tile: state.tile,
                  desc: state.desc,
                  checked: state.checked,
                  tabitems: state.tabitems,
                  index: state.index,
                  items: $$Array.mapi((function (i, item) {
                          if (index$9 !== i) {
                            return item;
                          }
                          var newrecord = Caml_obj.caml_obj_dup(item);
                          newrecord.phoneValue = value$3;
                          newrecord.showPhoneFile = !item.showPhoneFile;
                          return newrecord;
                        }), state.items),
                  showYoutube: state.showYoutube,
                  youtubeText: state.youtubeText
                };
      case /* ChangeItemPhone */15 :
          var index$10 = action[1];
          var value$4 = action[0];
          return {
                  formLoad: state.formLoad,
                  showProgress: state.showProgress,
                  error: state.error,
                  insert: state.insert,
                  update: state.update,
                  delete: state.delete,
                  export: state.export,
                  formId: state.formId,
                  tile: state.tile,
                  desc: state.desc,
                  checked: state.checked,
                  tabitems: state.tabitems,
                  index: state.index,
                  items: $$Array.mapi((function (i, item) {
                          if (index$10 !== i) {
                            return item;
                          }
                          var newrecord = Caml_obj.caml_obj_dup(item);
                          newrecord.phoneValue = value$4;
                          return newrecord;
                        }), state.items),
                  showYoutube: state.showYoutube,
                  youtubeText: state.youtubeText
                };
      case /* ShowPhoneMenu */16 :
          var index$11 = action[0];
          return {
                  formLoad: state.formLoad,
                  showProgress: state.showProgress,
                  error: state.error,
                  insert: state.insert,
                  update: state.update,
                  delete: state.delete,
                  export: state.export,
                  formId: state.formId,
                  tile: state.tile,
                  desc: state.desc,
                  checked: state.checked,
                  tabitems: state.tabitems,
                  index: state.index,
                  items: $$Array.mapi((function (i, item) {
                          if (index$11 !== i) {
                            return item;
                          }
                          var newrecord = Caml_obj.caml_obj_dup(item);
                          newrecord.showPhoneMenu = !item.showPhoneMenu;
                          return newrecord;
                        }), state.items),
                  showYoutube: state.showYoutube,
                  youtubeText: state.youtubeText
                };
      case /* ClickPhoneMenu */17 :
          var index$12 = action[1];
          var value$5 = action[0];
          return {
                  formLoad: state.formLoad,
                  showProgress: state.showProgress,
                  error: state.error,
                  insert: state.insert,
                  update: state.update,
                  delete: state.delete,
                  export: state.export,
                  formId: state.formId,
                  tile: state.tile,
                  desc: state.desc,
                  checked: state.checked,
                  tabitems: state.tabitems,
                  index: state.index,
                  items: $$Array.mapi((function (i, item) {
                          if (index$12 !== i) {
                            return item;
                          }
                          var newrecord = Caml_obj.caml_obj_dup(item);
                          newrecord.showPhoneMenu = !item.showPhoneMenu;
                          newrecord.phoneValue = value$5;
                          return newrecord;
                        }), state.items),
                  showYoutube: state.showYoutube,
                  youtubeText: state.youtubeText
                };
      case /* ClickPhoneRadio */18 :
          var index$13 = action[1];
          var rindex$2 = action[0];
          return {
                  formLoad: state.formLoad,
                  showProgress: state.showProgress,
                  error: state.error,
                  insert: state.insert,
                  update: state.update,
                  delete: state.delete,
                  export: state.export,
                  formId: state.formId,
                  tile: state.tile,
                  desc: state.desc,
                  checked: state.checked,
                  tabitems: state.tabitems,
                  index: state.index,
                  items: $$Array.mapi((function (i, item) {
                          if (index$13 !== i) {
                            return item;
                          }
                          var newrecord = Caml_obj.caml_obj_dup(item);
                          newrecord.phoneanswitems = $$Array.mapi((function (ri, answeritem) {
                                  return {
                                          id: answeritem.id,
                                          value: answeritem.value,
                                          showAnswer: rindex$2 === ri ? !answeritem.showAnswer : false
                                        };
                                }), item.phoneanswitems);
                          return newrecord;
                        }), state.items),
                  showYoutube: state.showYoutube,
                  youtubeText: state.youtubeText
                };
      case /* ClickPhoneCheckbox */19 :
          var index$14 = action[1];
          var rindex$3 = action[0];
          return {
                  formLoad: state.formLoad,
                  showProgress: state.showProgress,
                  error: state.error,
                  insert: state.insert,
                  update: state.update,
                  delete: state.delete,
                  export: state.export,
                  formId: state.formId,
                  tile: state.tile,
                  desc: state.desc,
                  checked: state.checked,
                  tabitems: state.tabitems,
                  index: state.index,
                  items: $$Array.mapi((function (i, item) {
                          if (index$14 !== i) {
                            return item;
                          }
                          var newrecord = Caml_obj.caml_obj_dup(item);
                          newrecord.phoneanswitems = $$Array.mapi((function (ri, answeritem) {
                                  if (rindex$3 === ri) {
                                    return {
                                            id: answeritem.id,
                                            value: answeritem.value,
                                            showAnswer: !answeritem.showAnswer
                                          };
                                  } else {
                                    return answeritem;
                                  }
                                }), item.phoneanswitems);
                          return newrecord;
                        }), state.items),
                  showYoutube: state.showYoutube,
                  youtubeText: state.youtubeText
                };
      case /* ShowAddrDrop */20 :
          var index$15 = action[1];
          var droped$2 = action[0];
          return {
                  formLoad: state.formLoad,
                  showProgress: state.showProgress,
                  error: state.error,
                  insert: state.insert,
                  update: state.update,
                  delete: state.delete,
                  export: state.export,
                  formId: state.formId,
                  tile: state.tile,
                  desc: state.desc,
                  checked: state.checked,
                  tabitems: state.tabitems,
                  index: state.index,
                  items: $$Array.mapi((function (i, item) {
                          if (index$15 !== i) {
                            return item;
                          }
                          var newrecord = Caml_obj.caml_obj_dup(item);
                          newrecord.showAddrDrop = droped$2;
                          return newrecord;
                        }), state.items),
                  showYoutube: state.showYoutube,
                  youtubeText: state.youtubeText
                };
      case /* ShowAddrFile */21 :
          var index$16 = action[1];
          var value$6 = action[0];
          return {
                  formLoad: state.formLoad,
                  showProgress: state.showProgress,
                  error: state.error,
                  insert: state.insert,
                  update: state.update,
                  delete: state.delete,
                  export: state.export,
                  formId: state.formId,
                  tile: state.tile,
                  desc: state.desc,
                  checked: state.checked,
                  tabitems: state.tabitems,
                  index: state.index,
                  items: $$Array.mapi((function (i, item) {
                          if (index$16 !== i) {
                            return item;
                          }
                          var newrecord = Caml_obj.caml_obj_dup(item);
                          newrecord.addrValue = value$6;
                          newrecord.showAddrFile = !item.showAddrFile;
                          return newrecord;
                        }), state.items),
                  showYoutube: state.showYoutube,
                  youtubeText: state.youtubeText
                };
      case /* ChangeItemAddr */22 :
          var index$17 = action[1];
          var value$7 = action[0];
          return {
                  formLoad: state.formLoad,
                  showProgress: state.showProgress,
                  error: state.error,
                  insert: state.insert,
                  update: state.update,
                  delete: state.delete,
                  export: state.export,
                  formId: state.formId,
                  tile: state.tile,
                  desc: state.desc,
                  checked: state.checked,
                  tabitems: state.tabitems,
                  index: state.index,
                  items: $$Array.mapi((function (i, item) {
                          if (index$17 !== i) {
                            return item;
                          }
                          var newrecord = Caml_obj.caml_obj_dup(item);
                          newrecord.addrValue = value$7;
                          return newrecord;
                        }), state.items),
                  showYoutube: state.showYoutube,
                  youtubeText: state.youtubeText
                };
      case /* ShowAddrMenu */23 :
          var index$18 = action[0];
          return {
                  formLoad: state.formLoad,
                  showProgress: state.showProgress,
                  error: state.error,
                  insert: state.insert,
                  update: state.update,
                  delete: state.delete,
                  export: state.export,
                  formId: state.formId,
                  tile: state.tile,
                  desc: state.desc,
                  checked: state.checked,
                  tabitems: state.tabitems,
                  index: state.index,
                  items: $$Array.mapi((function (i, item) {
                          if (index$18 !== i) {
                            return item;
                          }
                          var newrecord = Caml_obj.caml_obj_dup(item);
                          newrecord.showAddrMenu = !item.showAddrMenu;
                          return newrecord;
                        }), state.items),
                  showYoutube: state.showYoutube,
                  youtubeText: state.youtubeText
                };
      case /* ClickAddrMenu */24 :
          var index$19 = action[1];
          var value$8 = action[0];
          return {
                  formLoad: state.formLoad,
                  showProgress: state.showProgress,
                  error: state.error,
                  insert: state.insert,
                  update: state.update,
                  delete: state.delete,
                  export: state.export,
                  formId: state.formId,
                  tile: state.tile,
                  desc: state.desc,
                  checked: state.checked,
                  tabitems: state.tabitems,
                  index: state.index,
                  items: $$Array.mapi((function (i, item) {
                          if (index$19 !== i) {
                            return item;
                          }
                          var newrecord = Caml_obj.caml_obj_dup(item);
                          newrecord.showAddrMenu = !item.showAddrMenu;
                          newrecord.addrValue = value$8;
                          return newrecord;
                        }), state.items),
                  showYoutube: state.showYoutube,
                  youtubeText: state.youtubeText
                };
      case /* ClickAddrRadio */25 :
          var index$20 = action[1];
          var rindex$4 = action[0];
          return {
                  formLoad: state.formLoad,
                  showProgress: state.showProgress,
                  error: state.error,
                  insert: state.insert,
                  update: state.update,
                  delete: state.delete,
                  export: state.export,
                  formId: state.formId,
                  tile: state.tile,
                  desc: state.desc,
                  checked: state.checked,
                  tabitems: state.tabitems,
                  index: state.index,
                  items: $$Array.mapi((function (i, item) {
                          if (index$20 !== i) {
                            return item;
                          }
                          var newrecord = Caml_obj.caml_obj_dup(item);
                          newrecord.addranswitems = $$Array.mapi((function (ri, answeritem) {
                                  return {
                                          id: answeritem.id,
                                          value: answeritem.value,
                                          showAnswer: rindex$4 === ri ? !answeritem.showAnswer : false
                                        };
                                }), item.addranswitems);
                          return newrecord;
                        }), state.items),
                  showYoutube: state.showYoutube,
                  youtubeText: state.youtubeText
                };
      case /* ClickAddrCheckbox */26 :
          var index$21 = action[1];
          var rindex$5 = action[0];
          return {
                  formLoad: state.formLoad,
                  showProgress: state.showProgress,
                  error: state.error,
                  insert: state.insert,
                  update: state.update,
                  delete: state.delete,
                  export: state.export,
                  formId: state.formId,
                  tile: state.tile,
                  desc: state.desc,
                  checked: state.checked,
                  tabitems: state.tabitems,
                  index: state.index,
                  items: $$Array.mapi((function (i, item) {
                          if (index$21 !== i) {
                            return item;
                          }
                          var newrecord = Caml_obj.caml_obj_dup(item);
                          newrecord.addranswitems = $$Array.mapi((function (ri, answeritem) {
                                  if (rindex$5 === ri) {
                                    return {
                                            id: answeritem.id,
                                            value: answeritem.value,
                                            showAnswer: !answeritem.showAnswer
                                          };
                                  } else {
                                    return answeritem;
                                  }
                                }), item.addranswitems);
                          return newrecord;
                        }), state.items),
                  showYoutube: state.showYoutube,
                  youtubeText: state.youtubeText
                };
      case /* ActionSnackBar */27 :
          return {
                  formLoad: state.formLoad,
                  showProgress: state.showProgress,
                  error: state.error,
                  insert: state.insert,
                  update: state.update,
                  delete: state.delete,
                  export: state.export,
                  formId: state.formId,
                  tile: state.tile,
                  desc: state.desc,
                  checked: state.checked,
                  tabitems: state.tabitems,
                  index: state.index,
                  items: state.items,
                  showYoutube: action[1],
                  youtubeText: action[0]
                };
      
    }
  }
}

var initialState_tabitems = /* :: */[
  {
    showTabt: false,
    tabImage: Icons$BtsCore.storeBlack,
    tabPath: Path$BtsCore.storePath
  },
  /* :: */[
    {
      showTabt: false,
      tabImage: Icons$BtsCore.menuBookBlack,
      tabPath: Path$BtsCore.cartePath
    },
    /* :: */[
      {
        showTabt: true,
        tabImage: Icons$BtsCore.todayBlack,
        tabPath: Path$BtsCore.busdatePath
      },
      /* :: */[
        {
          showTabt: false,
          tabImage: Icons$BtsCore.insertInvitationBlack,
          tabPath: Path$BtsCore.fesdatePath
        },
        /* [] */0
      ]
    ]
  ]
];

var initialState_items = [];

var initialState = {
  formLoad: false,
  showProgress: true,
  error: false,
  insert: false,
  update: false,
  delete: false,
  export: false,
  formId: "",
  tile: "",
  desc: "",
  checked: false,
  tabitems: initialState_tabitems,
  index: 0,
  items: initialState_items,
  showYoutube: false,
  youtubeText: ""
};

function Store(Props) {
  var match = React.useReducer(reducer, initialState);
  var dispatch = match[1];
  var state = match[0];
  var fileRef = React.useRef(null);
  var barShowRestoreAction = function (youtubeText) {
    Curry._1(dispatch, /* ActionSnackBar */Block.__(27, [
            youtubeText,
            true
          ]));
    setTimeout((function (param) {
            return Curry._1(dispatch, /* ActionSnackBar */Block.__(27, [
                          "",
                          false
                        ]));
          }), 5000);
    
  };
  var searchAJax = function (formId) {
    Axiosapi$BtsCore.Store.search(Data$BtsCore.dFormData(formId, localStorage.getItem("newid"))).then((function (response) {
              var match = response.data.status;
              var tmp;
              if (match === "istrue") {
                Curry._1(dispatch, /* SettingFormItems */Block.__(2, [
                        response.data.tile,
                        response.data.desc,
                        response.data.checked,
                        response.data.items
                      ]));
                tmp = Curry._1(dispatch, /* ActionShowProgress */1);
              } else {
                Curry._1(dispatch, /* SettingError */0);
                barShowRestoreAction(Status$BtsCore.statusModule(response.data.status));
                tmp = Curry._1(dispatch, /* ActionShowProgress */1);
              }
              return Promise.resolve(tmp);
            })).catch((function (error) {
            return Promise.resolve((console.log(error), undefined));
          }));
    
  };
  var permissAJax = function (param) {
    Axiosapi$BtsCore.Form.permiss(Data$BtsCore.userData(localStorage.getItem("newid"))).then((function (response) {
              return Promise.resolve((Curry._1(dispatch, /* ActionPermissItems */Block.__(1, [
                                  response.data.insert,
                                  response.data.update,
                                  response.data.delete,
                                  response.data.export
                                ])), searchAJax(ReasonReactRouter.dangerouslyGetInitialUrl(undefined).hash)));
            })).catch((function (error) {
            return Promise.resolve((console.log(error), undefined));
          }));
    
  };
  React.useEffect((function () {
          if (state.formLoad) {
            return (function (param) {
                      console.log("action");
                      
                    });
          }
          Curry._1(dispatch, /* SettingFormLoad */Block.__(0, [ReasonReactRouter.dangerouslyGetInitialUrl(undefined).hash]));
          var timeId = permissAJax(undefined);
          return (function (param) {
                    return timeId;
                  });
        }));
  React.useEffect((function () {
          var watcherId = ReasonReactRouter.watchUrl((function (url) {
                  Curry._1(dispatch, /* SettingFormLoad */Block.__(0, [ReasonReactRouter.dangerouslyGetInitialUrl(undefined).hash]));
                  return Curry._1(dispatch, /* ActionShowProgress */1);
                }));
          return (function (param) {
                    return ReasonReactRouter.unwatchUrl(watcherId);
                  });
        }), ([]));
  var changeFormTitle = React.useCallback((function (value) {
          return Curry._1(dispatch, /* ChangeFormTitle */Block.__(3, [value]));
        }));
  var changeFormDescription = React.useCallback((function (value) {
          return Curry._1(dispatch, /* ChangeFormDescription */Block.__(4, [value]));
        }));
  var showChecked = React.useCallback((function (param) {
          return Curry._1(dispatch, /* ShowChecked */2);
        }));
  var clickItemTab = React.useCallback((function (i) {
          return (function (tabPath) {
              Curry._1(dispatch, /* ClickItemTab */Block.__(5, [i]));
              return ReasonReactRouter.push(tabPath + ("#" + state.formId));
            });
        }));
  var upTypeAJax = function (file, i) {
    var formData = new FormData();
    formData.append("file", file);
    Axiosapi$BtsCore.Files.upload(formData).then((function (response) {
              var match = response.data.status;
              var tmp;
              if (match === "istrue") {
                Curry._1(dispatch, /* ShowTypeFile */Block.__(7, [
                        response.data.file,
                        i
                      ]));
                tmp = Curry._1(dispatch, /* ActionShowProgress */1);
              } else {
                barShowRestoreAction(Status$BtsCore.uploadModels(response.data.status));
                tmp = Curry._1(dispatch, /* ActionShowProgress */1);
              }
              return Promise.resolve(tmp);
            })).catch((function (error) {
            return Promise.resolve((console.log(error), undefined));
          }));
    
  };
  var dragOverType = React.useCallback((function ($$event) {
          return (function (i) {
              $$event.preventDefault();
              $$event.stopPropagation();
              return Curry._1(dispatch, /* ShowTypeDrop */Block.__(6, [
                            true,
                            i
                          ]));
            });
        }));
  var dragLeaveType = React.useCallback((function ($$event) {
          return (function (i) {
              $$event.preventDefault();
              $$event.stopPropagation();
              return Curry._1(dispatch, /* ShowTypeDrop */Block.__(6, [
                            false,
                            i
                          ]));
            });
        }));
  var dropItemType = React.useCallback((function ($$event) {
          return (function (value, i) {
              $$event.preventDefault();
              $$event.stopPropagation();
              Curry._1(dispatch, /* ActionShowProgress */1);
              Curry._1(dispatch, /* ShowTypeDrop */Block.__(6, [
                      false,
                      i
                    ]));
              return upTypeAJax(value, i);
            });
        }));
  var uploadItemType = React.useCallback((function (value) {
          return (function (i) {
              Curry._1(dispatch, /* ActionShowProgress */1);
              return upTypeAJax(value, i);
            });
        }));
  var changeItemType = React.useCallback((function (value) {
          return (function (i) {
              return Curry._1(dispatch, /* ChangeItemType */Block.__(8, [
                            value,
                            i
                          ]));
            });
        }));
  var showTypeMenu = React.useCallback((function (i) {
          return Curry._1(dispatch, /* ShowTypeMenu */Block.__(9, [i]));
        }));
  var clickTypeMenu = React.useCallback((function (value) {
          return (function (i) {
              return Curry._1(dispatch, /* ClickTypeMenu */Block.__(10, [
                            value,
                            i
                          ]));
            });
        }));
  var clickTypeElement = React.useCallback((function (value) {
          return (function (ri, i) {
              if (value === "checkbox") {
                return Curry._1(dispatch, /* ClickTypeCheckbox */Block.__(12, [
                              ri,
                              i
                            ]));
              } else {
                return Curry._1(dispatch, /* ClickTypeRadio */Block.__(11, [
                              ri,
                              i
                            ]));
              }
            });
        }));
  var upPhoneAJax = function (file, i) {
    var formData = new FormData();
    formData.append("file", file);
    Axiosapi$BtsCore.Files.upload(formData).then((function (response) {
              var match = response.data.status;
              var tmp;
              if (match === "istrue") {
                Curry._1(dispatch, /* ShowPhoneFile */Block.__(14, [
                        response.data.file,
                        i
                      ]));
                tmp = Curry._1(dispatch, /* ActionShowProgress */1);
              } else {
                barShowRestoreAction(Status$BtsCore.uploadModels(response.data.status));
                tmp = Curry._1(dispatch, /* ActionShowProgress */1);
              }
              return Promise.resolve(tmp);
            })).catch((function (error) {
            return Promise.resolve((console.log(error), undefined));
          }));
    
  };
  var dragOverPhone = React.useCallback((function ($$event) {
          return (function (i) {
              $$event.preventDefault();
              $$event.stopPropagation();
              return Curry._1(dispatch, /* ShowPhoneDrop */Block.__(13, [
                            true,
                            i
                          ]));
            });
        }));
  var dragLeavePhone = React.useCallback((function ($$event) {
          return (function (i) {
              $$event.preventDefault();
              $$event.stopPropagation();
              return Curry._1(dispatch, /* ShowPhoneDrop */Block.__(13, [
                            false,
                            i
                          ]));
            });
        }));
  var dropItemPhone = React.useCallback((function ($$event) {
          return (function (value, i) {
              $$event.preventDefault();
              $$event.stopPropagation();
              Curry._1(dispatch, /* ActionShowProgress */1);
              Curry._1(dispatch, /* ShowPhoneDrop */Block.__(13, [
                      false,
                      i
                    ]));
              return upPhoneAJax(value, i);
            });
        }));
  var uploadItemPhone = React.useCallback((function (value) {
          return (function (i) {
              Curry._1(dispatch, /* ActionShowProgress */1);
              return upPhoneAJax(value, i);
            });
        }));
  var changeItemPhone = React.useCallback((function (value) {
          return (function (i) {
              return Curry._1(dispatch, /* ChangeItemPhone */Block.__(15, [
                            value,
                            i
                          ]));
            });
        }));
  var showPhoneMenu = React.useCallback((function (i) {
          return Curry._1(dispatch, /* ShowPhoneMenu */Block.__(16, [i]));
        }));
  var clickPhoneMenu = React.useCallback((function (value) {
          return (function (i) {
              return Curry._1(dispatch, /* ClickPhoneMenu */Block.__(17, [
                            value,
                            i
                          ]));
            });
        }));
  var clickPhoneElement = React.useCallback((function (value) {
          return (function (ri, i) {
              if (value === "checkbox") {
                return Curry._1(dispatch, /* ClickPhoneCheckbox */Block.__(19, [
                              ri,
                              i
                            ]));
              } else {
                return Curry._1(dispatch, /* ClickPhoneRadio */Block.__(18, [
                              ri,
                              i
                            ]));
              }
            });
        }));
  var upAddrAJax = function (file, i) {
    var formData = new FormData();
    formData.append("file", file);
    Axiosapi$BtsCore.Files.upload(formData).then((function (response) {
              var match = response.data.status;
              var tmp;
              if (match === "istrue") {
                Curry._1(dispatch, /* ShowAddrFile */Block.__(21, [
                        response.data.file,
                        i
                      ]));
                tmp = Curry._1(dispatch, /* ActionShowProgress */1);
              } else {
                barShowRestoreAction(Status$BtsCore.uploadModels(response.data.status));
                tmp = Curry._1(dispatch, /* ActionShowProgress */1);
              }
              return Promise.resolve(tmp);
            })).catch((function (error) {
            return Promise.resolve((console.log(error), undefined));
          }));
    
  };
  var dragOverAddr = React.useCallback((function ($$event) {
          return (function (i) {
              $$event.preventDefault();
              $$event.stopPropagation();
              return Curry._1(dispatch, /* ShowAddrDrop */Block.__(20, [
                            true,
                            i
                          ]));
            });
        }));
  var dragLeaveAddr = React.useCallback((function ($$event) {
          return (function (i) {
              $$event.preventDefault();
              $$event.stopPropagation();
              return Curry._1(dispatch, /* ShowAddrDrop */Block.__(20, [
                            false,
                            i
                          ]));
            });
        }));
  var dropItemAddr = React.useCallback((function ($$event) {
          return (function (value, i) {
              $$event.preventDefault();
              $$event.stopPropagation();
              Curry._1(dispatch, /* ActionShowProgress */1);
              Curry._1(dispatch, /* ShowAddrDrop */Block.__(20, [
                      false,
                      i
                    ]));
              return upAddrAJax(value, i);
            });
        }));
  var uploadItemAddr = React.useCallback((function (value) {
          return (function (i) {
              Curry._1(dispatch, /* ActionShowProgress */1);
              return upAddrAJax(value, i);
            });
        }));
  var changeItemAddr = React.useCallback((function (value) {
          return (function (i) {
              return Curry._1(dispatch, /* ChangeItemAddr */Block.__(22, [
                            value,
                            i
                          ]));
            });
        }));
  var showAddrMenu = React.useCallback((function (i) {
          return Curry._1(dispatch, /* ShowAddrMenu */Block.__(23, [i]));
        }));
  var clickAddrMenu = React.useCallback((function (value) {
          return (function (i) {
              return Curry._1(dispatch, /* ClickAddrMenu */Block.__(24, [
                            value,
                            i
                          ]));
            });
        }));
  var clickAddrElement = React.useCallback((function (value) {
          return (function (ri, i) {
              if (value === "checkbox") {
                return Curry._1(dispatch, /* ClickAddrCheckbox */Block.__(26, [
                              ri,
                              i
                            ]));
              } else {
                return Curry._1(dispatch, /* ClickAddrRadio */Block.__(25, [
                              ri,
                              i
                            ]));
              }
            });
        }));
  var chooseFile = React.useCallback((function (param) {
          var el = fileRef.current;
          if (!(el == null)) {
            el.click();
            return ;
          }
          
        }));
  var insertForm = React.useCallback((function (param) {
          Curry._1(dispatch, /* ActionShowProgress */1);
          Axiosapi$BtsCore.Store.insert(Data$BtsCore.iFormData(state.formId, state.tile, state.desc, state.items, localStorage.getItem("newid"))).then((function (response) {
                    var match = response.data.status;
                    var tmp;
                    if (match === "istrue") {
                      barShowRestoreAction(Status$BtsCore.statusModule("sendSuccess"));
                      tmp = Curry._1(dispatch, /* ActionShowProgress */1);
                    } else {
                      barShowRestoreAction(Status$BtsCore.statusModule(response.data.status));
                      tmp = Curry._1(dispatch, /* ActionShowProgress */1);
                    }
                    return Promise.resolve(tmp);
                  })).catch((function (error) {
                  return Promise.resolve((console.log(error), undefined));
                }));
          
        }));
  return React.createElement(React.Fragment, undefined, React.createElement(NewFacetube$BtsCore.make, {
                  showProgress: state.showProgress,
                  error: state.error,
                  children: React.createElement(GridItem$BtsCore.make, {
                        style: Together$BtsCore.marginAuto,
                        top: "0",
                        right: "0",
                        bottom: "0",
                        left: "0",
                        xs: "12",
                        maxWidth: "770px",
                        children: React.createElement(GridContainer$BtsCore.make, {
                              direction: "column",
                              justify: "center",
                              alignItem: "stretch",
                              children: null
                            }, React.createElement(GridItem$BtsCore.make, {
                                  top: "0",
                                  right: "24",
                                  bottom: "0",
                                  left: "24",
                                  xs: "auto",
                                  children: React.createElement(GridContainer$BtsCore.make, {
                                        direction: "row",
                                        justify: "center",
                                        alignItem: "center",
                                        children: null
                                      }, React.createElement(GridItem$BtsCore.make, {
                                            top: "0",
                                            bottom: "0",
                                            left: "0",
                                            xs: "auto",
                                            children: React.createElement(TextFieldStandard$BtsCore.make, {
                                                  labelColor: "rgba(255,0,0,0.8)",
                                                  enterBorderColor: "rgba(255,0,0,0.8)",
                                                  downBorderColor: "rgba(255,0,0,0.6)",
                                                  borderColor: "rgba(0,0,0,0.2)",
                                                  placeholder: "Project Tile",
                                                  value: state.tile,
                                                  disabled: state.showProgress,
                                                  onChange: (function ($$event) {
                                                      return Curry._1(changeFormTitle, $$event.target.value);
                                                    }),
                                                  children: React.createElement(ReactIntl.FormattedMessage, {
                                                        id: "Together.name",
                                                        defaultMessage: "Name"
                                                      })
                                                })
                                          }), React.createElement(GridItem$BtsCore.make, {
                                            top: "0",
                                            right: "0",
                                            bottom: "0",
                                            left: "0",
                                            xs: "no",
                                            children: React.createElement(Switch$BtsCore.make, {
                                                  checked: state.checked,
                                                  circleColor: SwitchColor$BtsCore.circle(state.checked),
                                                  linearColor: SwitchColor$BtsCore.linear(state.checked),
                                                  fontColor: SwitchColor$BtsCore.font(state.checked),
                                                  disabled: state.showProgress,
                                                  onClick: showChecked,
                                                  children: React.createElement(Typography$BtsCore.make, {
                                                        variant: "subtitle1",
                                                        color: "rgba(255,0,0,1)",
                                                        fontWeight: "bolder",
                                                        children: React.createElement(ReactIntl.FormattedMessage, {
                                                              id: "release",
                                                              defaultMessage: "Release"
                                                            })
                                                      })
                                                })
                                          }))
                                }), React.createElement(GridItem$BtsCore.make, {
                                  top: "0",
                                  right: "24",
                                  left: "24",
                                  xs: "auto",
                                  children: React.createElement(TextFieldStandard$BtsCore.make, {
                                        labelColor: "rgba(255,0,0,0.8)",
                                        enterBorderColor: "rgba(255,0,0,0.8)",
                                        downBorderColor: "rgba(255,0,0,0.6)",
                                        borderColor: "rgba(0,0,0,0.2)",
                                        placeholder: "Project Desc",
                                        value: state.desc,
                                        disabled: state.showProgress,
                                        onChange: (function ($$event) {
                                            return Curry._1(changeFormDescription, $$event.target.value);
                                          }),
                                        children: React.createElement(ReactIntl.FormattedMessage, {
                                              id: "Together.remark",
                                              defaultMessage: "Remark"
                                            })
                                      })
                                }), React.createElement(GridItem$BtsCore.make, {
                                  top: "0",
                                  right: "24",
                                  bottom: "0",
                                  left: "24",
                                  xs: "auto",
                                  children: React.createElement(Tabs$BtsCore.make, {
                                        id: "bus-",
                                        index: state.index,
                                        short: 20,
                                        height: "3",
                                        children: $$Array.of_list(List.mapi((function (i, tabtitem) {
                                                    return React.createElement(Tab$BtsCore.make, {
                                                                showTab: tabtitem.showTabt,
                                                                maxWidth: "111.6",
                                                                borderRadius: "15",
                                                                id: "bus-" + String(i),
                                                                animationName: "none",
                                                                onClick: (function (param) {
                                                                    return Curry._2(clickItemTab, i, tabtitem.tabPath);
                                                                  }),
                                                                children: React.createElement(IconAction$BtsCore.make, {
                                                                      width: "28",
                                                                      height: "28",
                                                                      animation: "leftRight",
                                                                      src: tabtitem.tabImage
                                                                    })
                                                              });
                                                  }), state.tabitems))
                                      })
                                }), $$Array.mapi((function (i, item) {
                                    var tmp;
                                    if (item.showType) {
                                      var match = item.typeOutValue;
                                      switch (match) {
                                        case "droplist" :
                                            tmp = React.createElement(React.Fragment, undefined, React.createElement(SelectStandard$BtsCore.make, {
                                                      width: "50",
                                                      labelColor: "rgba(255,0,0,0.8)",
                                                      tile: item.typeTitle,
                                                      enterBorderColor: "rgba(255,0,0,0.8)",
                                                      downBorderColor: "rgba(255,0,0,0.6)",
                                                      borderColor: "rgba(0,0,0,0.2)",
                                                      value: item.typeValue,
                                                      disabled: state.showProgress,
                                                      onClick: (function (param) {
                                                          return Curry._1(showTypeMenu, i);
                                                        }),
                                                      children: /* tuple */[
                                                        item.showTypeMenu ? React.createElement(SelectMenu$BtsCore.make, {
                                                                top: "50%",
                                                                transform: "translate(0, -50%)",
                                                                maxHeight: "280",
                                                                minHeight: "0",
                                                                topLeft: "12",
                                                                topRight: "12",
                                                                bottomRight: "12",
                                                                bottomLeft: "12",
                                                                paddingRight: "8",
                                                                paddingLeft: "8",
                                                                children: $$Array.map((function (typeitem) {
                                                                        return React.createElement(MenuItem$BtsCore.make, {
                                                                                    top: "0",
                                                                                    right: "8",
                                                                                    bottom: "0",
                                                                                    left: "8",
                                                                                    disablePadding: typeitem.optionPadding,
                                                                                    topLeft: "12",
                                                                                    topRight: "12",
                                                                                    bottomRight: "12",
                                                                                    bottomLeft: "12",
                                                                                    onClick: (function (param) {
                                                                                        return Curry._2(clickTypeMenu, typeitem.value, i);
                                                                                      }),
                                                                                    children: typeitem.value
                                                                                  });
                                                                      }), item.typeitems)
                                                              }) : null,
                                                        React.createElement(IconGeneral$BtsCore.make, {
                                                              animation: IconAnimation$BtsCore.topDownRorate(item.showTypeMenu),
                                                              src: Icons$BtsCore.arrowDownBlack
                                                            })
                                                      ]
                                                    }), React.createElement(BackgroundBoard$BtsCore.make, {
                                                      showBackground: item.showTypeMenu,
                                                      backgroundColor: "transparent",
                                                      onClick: (function (param) {
                                                          return Curry._1(showTypeMenu, i);
                                                        })
                                                    }));
                                            break;
                                        case "image" :
                                            tmp = React.createElement(ImageUpload$BtsCore.make, {
                                                  webLoad: state.showProgress,
                                                  showDrop: item.showTypeDrop,
                                                  showFile: item.showTypeFile,
                                                  src: item.typeValue,
                                                  fileRef: fileRef,
                                                  onDragOver: (function ($$event) {
                                                      return Curry._2(dragOverType, $$event, i);
                                                    }),
                                                  onDragLeave: (function ($$event) {
                                                      return Curry._2(dragLeaveType, $$event, i);
                                                    }),
                                                  onDrop: (function ($$event) {
                                                      return Curry._3(dropItemType, $$event, Caml_array.caml_array_get($$event.nativeEvent.dataTransfer.files, 0), i);
                                                    }),
                                                  disabled: state.showProgress,
                                                  onClick: chooseFile,
                                                  onChange: (function ($$event) {
                                                      return Curry._2(uploadItemType, Caml_array.caml_array_get($$event.target.files, 0), i);
                                                    })
                                                });
                                            break;
                                        case "label" :
                                            tmp = React.createElement(Typography$BtsCore.make, {
                                                  variant: "subtitle2",
                                                  style: {
                                                    paddingLeft: "6px"
                                                  },
                                                  noWrap: true,
                                                  children: item.typeValue
                                                });
                                            break;
                                        case "text" :
                                            tmp = React.createElement(TextFieldStandard$BtsCore.make, {
                                                  width: "50",
                                                  labelColor: "rgba(255,0,0,0.8)",
                                                  enterBorderColor: "rgba(255,0,0,0.8)",
                                                  downBorderColor: "rgba(255,0,0,0.6)",
                                                  borderColor: "rgba(0,0,0,0.2)",
                                                  value: item.typeValue,
                                                  disabled: state.showProgress,
                                                  onChange: (function ($$event) {
                                                      return Curry._2(changeItemType, $$event.target.value, i);
                                                    }),
                                                  children: item.typeTitle
                                                });
                                            break;
                                        case "textarea" :
                                            tmp = React.createElement(TextFieldMultiline$BtsCore.make, {
                                                  labelColor: "rgba(255,0,0,0.8)",
                                                  enterBorderColor: "rgba(255,0,0,0.8)",
                                                  downBorderColor: "rgba(255,0,0,0.6)",
                                                  borderColor: "rgba(0,0,0,0.2)",
                                                  rows: 3,
                                                  value: item.typeValue,
                                                  disabled: state.showProgress,
                                                  onChange: (function ($$event) {
                                                      return Curry._2(changeItemType, $$event.target.value, i);
                                                    }),
                                                  children: item.typeTitle
                                                });
                                            break;
                                        case "textline" :
                                            tmp = React.createElement(TextFieldStandard$BtsCore.make, {
                                                  labelColor: "rgba(255,0,0,0.8)",
                                                  enterBorderColor: "rgba(255,0,0,0.8)",
                                                  downBorderColor: "rgba(255,0,0,0.6)",
                                                  borderColor: "rgba(0,0,0,0.2)",
                                                  value: item.typeValue,
                                                  disabled: state.showProgress,
                                                  onChange: (function ($$event) {
                                                      return Curry._2(changeItemType, $$event.target.value, i);
                                                    }),
                                                  children: item.typeTitle
                                                });
                                            break;
                                        default:
                                          tmp = React.createElement(GridContainer$BtsCore.make, {
                                                direction: "column",
                                                justify: "center",
                                                alignItem: "stretch",
                                                children: $$Array.mapi((function (ai, answeritem) {
                                                        return React.createElement(GridItem$BtsCore.make, {
                                                                    top: "0",
                                                                    right: "0",
                                                                    bottom: "6",
                                                                    left: "0",
                                                                    xs: "auto",
                                                                    children: React.createElement(GridContainer$BtsCore.make, {
                                                                          direction: "row",
                                                                          justify: "start",
                                                                          alignItem: "center",
                                                                          children: null
                                                                        }, React.createElement(GridItem$BtsCore.make, {
                                                                              top: "0",
                                                                              right: "0",
                                                                              bottom: "0",
                                                                              left: "0",
                                                                              xs: "no",
                                                                              children: React.createElement(IconButton$BtsCore.make, {
                                                                                    padding: "4",
                                                                                    disabled: state.showProgress,
                                                                                    children: React.createElement(IconAction$BtsCore.make, {
                                                                                          animation: "leftRight",
                                                                                          src: Icons$BtsCore.radioButtonUncheckedBlack
                                                                                        })
                                                                                  })
                                                                            }), React.createElement(GridItem$BtsCore.make, {
                                                                              top: "0",
                                                                              right: "6",
                                                                              bottom: "0",
                                                                              left: "0",
                                                                              xs: "auto",
                                                                              children: React.createElement(TextFieldStandard$BtsCore.make, {
                                                                                    top: "0",
                                                                                    enterBorderColor: AnswerColor$BtsCore.enterBorder(answeritem.showAnswer),
                                                                                    downBorderColor: AnswerColor$BtsCore.downBorder(answeritem.showAnswer),
                                                                                    borderColor: AnswerColor$BtsCore.border(answeritem.showAnswer),
                                                                                    placeholder: "Option",
                                                                                    value: answeritem.value,
                                                                                    disabled: true,
                                                                                    children: null
                                                                                  })
                                                                            }), React.createElement(GridItem$BtsCore.make, {
                                                                              top: "0",
                                                                              right: "6",
                                                                              bottom: "0",
                                                                              left: "0",
                                                                              xs: "no",
                                                                              children: React.createElement(IconButton$BtsCore.make, {
                                                                                    padding: "4",
                                                                                    disabled: state.showProgress,
                                                                                    onClick: (function (param) {
                                                                                        return Curry._3(clickTypeElement, item.typeOutValue, ai, i);
                                                                                      }),
                                                                                    children: React.createElement(IconAction$BtsCore.make, {
                                                                                          animation: "leftRight",
                                                                                          src: answeritem.showAnswer ? Icons$BtsCore.doneSuccessful : Icons$BtsCore.errorWarn
                                                                                        })
                                                                                  })
                                                                            }))
                                                                  });
                                                      }), item.typeanswitems)
                                              });
                                      }
                                    } else {
                                      tmp = null;
                                    }
                                    var tmp$1;
                                    if (item.showPhone) {
                                      var match$1 = item.phoneOutValue;
                                      switch (match$1) {
                                        case "droplist" :
                                            tmp$1 = React.createElement(React.Fragment, undefined, React.createElement(SelectStandard$BtsCore.make, {
                                                      labelColor: "rgba(255,0,0,0.8)",
                                                      tile: item.phoneTitle,
                                                      enterBorderColor: "rgba(255,0,0,0.8)",
                                                      downBorderColor: "rgba(255,0,0,0.6)",
                                                      borderColor: "rgba(0,0,0,0.2)",
                                                      value: item.phoneValue,
                                                      disabled: state.showProgress,
                                                      onClick: (function (param) {
                                                          return Curry._1(showPhoneMenu, i);
                                                        }),
                                                      children: /* tuple */[
                                                        item.showPhoneMenu ? React.createElement(SelectMenu$BtsCore.make, {
                                                                top: "50%",
                                                                transform: "translate(0, -50%)",
                                                                maxHeight: "280",
                                                                minHeight: "0",
                                                                topLeft: "12",
                                                                topRight: "12",
                                                                bottomRight: "12",
                                                                bottomLeft: "12",
                                                                paddingRight: "8",
                                                                paddingLeft: "8",
                                                                children: $$Array.map((function (phoneitem) {
                                                                        return React.createElement(MenuItem$BtsCore.make, {
                                                                                    top: "0",
                                                                                    right: "8",
                                                                                    bottom: "0",
                                                                                    left: "8",
                                                                                    disablePadding: phoneitem.optionPadding,
                                                                                    topLeft: "12",
                                                                                    topRight: "12",
                                                                                    bottomRight: "12",
                                                                                    bottomLeft: "12",
                                                                                    onClick: (function (param) {
                                                                                        return Curry._2(clickPhoneMenu, phoneitem.value, i);
                                                                                      }),
                                                                                    children: phoneitem.value
                                                                                  });
                                                                      }), item.phoneitems)
                                                              }) : null,
                                                        React.createElement(IconGeneral$BtsCore.make, {
                                                              animation: IconAnimation$BtsCore.topDownRorate(item.showPhoneMenu),
                                                              src: Icons$BtsCore.arrowDownBlack
                                                            })
                                                      ]
                                                    }), React.createElement(BackgroundBoard$BtsCore.make, {
                                                      showBackground: item.showPhoneMenu,
                                                      backgroundColor: "transparent",
                                                      onClick: (function (param) {
                                                          return Curry._1(showPhoneMenu, i);
                                                        })
                                                    }));
                                            break;
                                        case "image" :
                                            tmp$1 = React.createElement(ImageUpload$BtsCore.make, {
                                                  webLoad: state.showProgress,
                                                  showDrop: item.showPhoneDrop,
                                                  showFile: item.showPhoneFile,
                                                  src: item.phoneValue,
                                                  fileRef: fileRef,
                                                  onDragOver: (function ($$event) {
                                                      return Curry._2(dragOverPhone, $$event, i);
                                                    }),
                                                  onDragLeave: (function ($$event) {
                                                      return Curry._2(dragLeavePhone, $$event, i);
                                                    }),
                                                  onDrop: (function ($$event) {
                                                      return Curry._3(dropItemPhone, $$event, Caml_array.caml_array_get($$event.nativeEvent.dataTransfer.files, 0), i);
                                                    }),
                                                  disabled: state.showProgress,
                                                  onClick: chooseFile,
                                                  onChange: (function ($$event) {
                                                      return Curry._2(uploadItemPhone, Caml_array.caml_array_get($$event.target.files, 0), i);
                                                    })
                                                });
                                            break;
                                        case "label" :
                                            tmp$1 = React.createElement(Typography$BtsCore.make, {
                                                  variant: "subtitle2",
                                                  style: {
                                                    paddingLeft: "6px"
                                                  },
                                                  noWrap: true,
                                                  children: item.phoneValue
                                                });
                                            break;
                                        case "text" :
                                            tmp$1 = React.createElement(TextFieldStandard$BtsCore.make, {
                                                  width: "50",
                                                  labelColor: "rgba(255,0,0,0.8)",
                                                  enterBorderColor: "rgba(255,0,0,0.8)",
                                                  downBorderColor: "rgba(255,0,0,0.6)",
                                                  borderColor: "rgba(0,0,0,0.2)",
                                                  value: item.phoneValue,
                                                  disabled: state.showProgress,
                                                  onChange: (function ($$event) {
                                                      return Curry._2(changeItemPhone, $$event.target.value, i);
                                                    }),
                                                  children: item.phoneTitle
                                                });
                                            break;
                                        case "textarea" :
                                            tmp$1 = React.createElement(TextFieldMultiline$BtsCore.make, {
                                                  labelColor: "rgba(255,0,0,0.8)",
                                                  enterBorderColor: "rgba(255,0,0,0.8)",
                                                  downBorderColor: "rgba(255,0,0,0.6)",
                                                  borderColor: "rgba(0,0,0,0.2)",
                                                  rows: 3,
                                                  value: item.phoneValue,
                                                  disabled: state.showProgress,
                                                  onChange: (function ($$event) {
                                                      return Curry._2(changeItemPhone, $$event.target.value, i);
                                                    }),
                                                  children: item.phoneTitle
                                                });
                                            break;
                                        case "textline" :
                                            tmp$1 = React.createElement(TextFieldStandard$BtsCore.make, {
                                                  labelColor: "rgba(255,0,0,0.8)",
                                                  enterBorderColor: "rgba(255,0,0,0.8)",
                                                  downBorderColor: "rgba(255,0,0,0.6)",
                                                  borderColor: "rgba(0,0,0,0.2)",
                                                  value: item.phoneValue,
                                                  disabled: state.showProgress,
                                                  onChange: (function ($$event) {
                                                      return Curry._2(changeItemPhone, $$event.target.value, i);
                                                    }),
                                                  children: item.phoneTitle
                                                });
                                            break;
                                        default:
                                          tmp$1 = React.createElement(GridContainer$BtsCore.make, {
                                                direction: "column",
                                                justify: "center",
                                                alignItem: "stretch",
                                                children: $$Array.mapi((function (ai, answeritem) {
                                                        return React.createElement(GridItem$BtsCore.make, {
                                                                    top: "0",
                                                                    right: "0",
                                                                    bottom: "6",
                                                                    left: "0",
                                                                    xs: "auto",
                                                                    children: React.createElement(GridContainer$BtsCore.make, {
                                                                          direction: "row",
                                                                          justify: "start",
                                                                          alignItem: "center",
                                                                          children: null
                                                                        }, React.createElement(GridItem$BtsCore.make, {
                                                                              top: "0",
                                                                              right: "0",
                                                                              bottom: "0",
                                                                              left: "0",
                                                                              xs: "no",
                                                                              children: React.createElement(IconButton$BtsCore.make, {
                                                                                    padding: "4",
                                                                                    disabled: state.showProgress,
                                                                                    children: React.createElement(IconAction$BtsCore.make, {
                                                                                          animation: "leftRight",
                                                                                          src: Icons$BtsCore.radioButtonUncheckedBlack
                                                                                        })
                                                                                  })
                                                                            }), React.createElement(GridItem$BtsCore.make, {
                                                                              top: "0",
                                                                              right: "6",
                                                                              bottom: "0",
                                                                              left: "0",
                                                                              xs: "auto",
                                                                              children: React.createElement(TextFieldStandard$BtsCore.make, {
                                                                                    top: "0",
                                                                                    enterBorderColor: AnswerColor$BtsCore.enterBorder(answeritem.showAnswer),
                                                                                    downBorderColor: AnswerColor$BtsCore.downBorder(answeritem.showAnswer),
                                                                                    borderColor: AnswerColor$BtsCore.border(answeritem.showAnswer),
                                                                                    placeholder: "Option",
                                                                                    value: answeritem.value,
                                                                                    disabled: true,
                                                                                    children: null
                                                                                  })
                                                                            }), React.createElement(GridItem$BtsCore.make, {
                                                                              top: "0",
                                                                              right: "6",
                                                                              bottom: "0",
                                                                              left: "0",
                                                                              xs: "no",
                                                                              children: React.createElement(IconButton$BtsCore.make, {
                                                                                    padding: "4",
                                                                                    disabled: state.showProgress,
                                                                                    onClick: (function (param) {
                                                                                        return Curry._3(clickPhoneElement, item.phoneOutValue, ai, i);
                                                                                      }),
                                                                                    children: React.createElement(IconAction$BtsCore.make, {
                                                                                          animation: "leftRight",
                                                                                          src: answeritem.showAnswer ? Icons$BtsCore.doneSuccessful : Icons$BtsCore.errorWarn
                                                                                        })
                                                                                  })
                                                                            }))
                                                                  });
                                                      }), item.phoneanswitems)
                                              });
                                      }
                                    } else {
                                      tmp$1 = null;
                                    }
                                    var tmp$2;
                                    if (item.showAddr) {
                                      var match$2 = item.addrOutValue;
                                      switch (match$2) {
                                        case "droplist" :
                                            tmp$2 = React.createElement(React.Fragment, undefined, React.createElement(SelectStandard$BtsCore.make, {
                                                      labelColor: "rgba(255,0,0,0.8)",
                                                      tile: item.addrTitle,
                                                      enterBorderColor: "rgba(255,0,0,0.8)",
                                                      downBorderColor: "rgba(255,0,0,0.6)",
                                                      borderColor: "rgba(0,0,0,0.2)",
                                                      value: item.addrValue,
                                                      disabled: state.showProgress,
                                                      onClick: (function (param) {
                                                          return Curry._1(showAddrMenu, i);
                                                        }),
                                                      children: /* tuple */[
                                                        item.showAddrMenu ? React.createElement(SelectMenu$BtsCore.make, {
                                                                top: "50%",
                                                                transform: "translate(0, -50%)",
                                                                maxHeight: "280",
                                                                minHeight: "0",
                                                                topLeft: "12",
                                                                topRight: "12",
                                                                bottomRight: "12",
                                                                bottomLeft: "12",
                                                                paddingRight: "8",
                                                                paddingLeft: "8",
                                                                children: $$Array.map((function (addressitem) {
                                                                        return React.createElement(MenuItem$BtsCore.make, {
                                                                                    top: "0",
                                                                                    right: "8",
                                                                                    bottom: "0",
                                                                                    left: "8",
                                                                                    disablePadding: addressitem.optionPadding,
                                                                                    topLeft: "12",
                                                                                    topRight: "12",
                                                                                    bottomRight: "12",
                                                                                    bottomLeft: "12",
                                                                                    onClick: (function (param) {
                                                                                        return Curry._2(clickAddrMenu, addressitem.value, i);
                                                                                      }),
                                                                                    children: addressitem.value
                                                                                  });
                                                                      }), item.addritems)
                                                              }) : null,
                                                        React.createElement(IconGeneral$BtsCore.make, {
                                                              animation: IconAnimation$BtsCore.topDownRorate(item.showAddrMenu),
                                                              src: Icons$BtsCore.arrowDownBlack
                                                            })
                                                      ]
                                                    }), React.createElement(BackgroundBoard$BtsCore.make, {
                                                      showBackground: item.showAddrMenu,
                                                      backgroundColor: "transparent",
                                                      onClick: (function (param) {
                                                          return Curry._1(showAddrMenu, i);
                                                        })
                                                    }));
                                            break;
                                        case "image" :
                                            tmp$2 = React.createElement(ImageUpload$BtsCore.make, {
                                                  webLoad: state.showProgress,
                                                  showDrop: item.showAddrDrop,
                                                  showFile: item.showAddrFile,
                                                  src: item.addrValue,
                                                  fileRef: fileRef,
                                                  onDragOver: (function ($$event) {
                                                      return Curry._2(dragOverAddr, $$event, i);
                                                    }),
                                                  onDragLeave: (function ($$event) {
                                                      return Curry._2(dragLeaveAddr, $$event, i);
                                                    }),
                                                  onDrop: (function ($$event) {
                                                      return Curry._3(dropItemAddr, $$event, Caml_array.caml_array_get($$event.nativeEvent.dataTransfer.files, 0), i);
                                                    }),
                                                  disabled: state.showProgress,
                                                  onClick: chooseFile,
                                                  onChange: (function ($$event) {
                                                      return Curry._2(uploadItemAddr, Caml_array.caml_array_get($$event.target.files, 0), i);
                                                    })
                                                });
                                            break;
                                        case "label" :
                                            tmp$2 = React.createElement(Typography$BtsCore.make, {
                                                  variant: "subtitle2",
                                                  style: {
                                                    paddingLeft: "6px"
                                                  },
                                                  noWrap: true,
                                                  children: item.addrValue
                                                });
                                            break;
                                        case "text" :
                                            tmp$2 = React.createElement(TextFieldStandard$BtsCore.make, {
                                                  width: "50",
                                                  labelColor: "rgba(255,0,0,0.8)",
                                                  enterBorderColor: "rgba(255,0,0,0.8)",
                                                  downBorderColor: "rgba(255,0,0,0.6)",
                                                  borderColor: "rgba(0,0,0,0.2)",
                                                  value: item.addrValue,
                                                  disabled: state.showProgress,
                                                  onChange: (function ($$event) {
                                                      return Curry._2(changeItemAddr, $$event.target.value, i);
                                                    }),
                                                  children: item.addrTitle
                                                });
                                            break;
                                        case "textarea" :
                                            tmp$2 = React.createElement(TextFieldMultiline$BtsCore.make, {
                                                  labelColor: "rgba(255,0,0,0.8)",
                                                  enterBorderColor: "rgba(255,0,0,0.8)",
                                                  downBorderColor: "rgba(255,0,0,0.6)",
                                                  borderColor: "rgba(0,0,0,0.2)",
                                                  rows: 3,
                                                  value: item.addrValue,
                                                  disabled: state.showProgress,
                                                  onChange: (function ($$event) {
                                                      return Curry._2(changeItemAddr, $$event.target.value, i);
                                                    }),
                                                  children: item.addrTitle
                                                });
                                            break;
                                        case "textline" :
                                            tmp$2 = React.createElement(TextFieldStandard$BtsCore.make, {
                                                  labelColor: "rgba(255,0,0,0.8)",
                                                  enterBorderColor: "rgba(255,0,0,0.8)",
                                                  downBorderColor: "rgba(255,0,0,0.6)",
                                                  borderColor: "rgba(0,0,0,0.2)",
                                                  value: item.addrValue,
                                                  disabled: state.showProgress,
                                                  onChange: (function ($$event) {
                                                      return Curry._2(changeItemAddr, $$event.target.value, i);
                                                    }),
                                                  children: item.addrTitle
                                                });
                                            break;
                                        default:
                                          tmp$2 = React.createElement(GridContainer$BtsCore.make, {
                                                direction: "column",
                                                justify: "center",
                                                alignItem: "stretch",
                                                children: $$Array.mapi((function (ai, answeritem) {
                                                        return React.createElement(GridItem$BtsCore.make, {
                                                                    top: "0",
                                                                    right: "0",
                                                                    bottom: "6",
                                                                    left: "0",
                                                                    xs: "auto",
                                                                    children: React.createElement(GridContainer$BtsCore.make, {
                                                                          direction: "row",
                                                                          justify: "start",
                                                                          alignItem: "center",
                                                                          children: null
                                                                        }, React.createElement(GridItem$BtsCore.make, {
                                                                              top: "0",
                                                                              right: "0",
                                                                              bottom: "0",
                                                                              left: "0",
                                                                              xs: "no",
                                                                              children: React.createElement(IconButton$BtsCore.make, {
                                                                                    padding: "4",
                                                                                    disabled: state.showProgress,
                                                                                    children: React.createElement(IconAction$BtsCore.make, {
                                                                                          animation: "leftRight",
                                                                                          src: Icons$BtsCore.radioButtonUncheckedBlack
                                                                                        })
                                                                                  })
                                                                            }), React.createElement(GridItem$BtsCore.make, {
                                                                              top: "0",
                                                                              right: "6",
                                                                              bottom: "0",
                                                                              left: "0",
                                                                              xs: "auto",
                                                                              children: React.createElement(TextFieldStandard$BtsCore.make, {
                                                                                    top: "0",
                                                                                    enterBorderColor: AnswerColor$BtsCore.enterBorder(answeritem.showAnswer),
                                                                                    downBorderColor: AnswerColor$BtsCore.downBorder(answeritem.showAnswer),
                                                                                    borderColor: AnswerColor$BtsCore.border(answeritem.showAnswer),
                                                                                    placeholder: "Option",
                                                                                    value: answeritem.value,
                                                                                    disabled: true,
                                                                                    children: null
                                                                                  })
                                                                            }), React.createElement(GridItem$BtsCore.make, {
                                                                              top: "0",
                                                                              right: "6",
                                                                              bottom: "0",
                                                                              left: "0",
                                                                              xs: "no",
                                                                              children: React.createElement(IconButton$BtsCore.make, {
                                                                                    padding: "4",
                                                                                    disabled: state.showProgress,
                                                                                    onClick: (function (param) {
                                                                                        return Curry._3(clickAddrElement, item.addrOutValue, ai, i);
                                                                                      }),
                                                                                    children: React.createElement(IconAction$BtsCore.make, {
                                                                                          animation: "leftRight",
                                                                                          src: answeritem.showAnswer ? Icons$BtsCore.doneSuccessful : Icons$BtsCore.errorWarn
                                                                                        })
                                                                                  })
                                                                            }))
                                                                  });
                                                      }), item.addranswitems)
                                              });
                                      }
                                    } else {
                                      tmp$2 = null;
                                    }
                                    return React.createElement(React.Fragment, undefined, React.createElement(GridItem$BtsCore.make, {
                                                    top: "0",
                                                    right: "24",
                                                    left: "24",
                                                    xs: "auto",
                                                    children: tmp
                                                  }), React.createElement(GridItem$BtsCore.make, {
                                                    top: "0",
                                                    right: "24",
                                                    left: "24",
                                                    xs: "auto",
                                                    children: tmp$1
                                                  }), React.createElement(GridItem$BtsCore.make, {
                                                    top: "0",
                                                    right: "24",
                                                    left: "24",
                                                    xs: "auto",
                                                    children: tmp$2
                                                  }));
                                  }), state.items), React.createElement(GridItem$BtsCore.make, {
                                  right: "24",
                                  left: "24",
                                  xs: "auto",
                                  children: React.createElement(Button$BtsCore.make, {
                                        enterBackgroundColor: "rgba(255,0,0,0.6)",
                                        backgroundColor: "rgba(255,0,0,0.8)",
                                        width: "100%",
                                        size: "large",
                                        disabled: state.showProgress,
                                        onClick: insertForm,
                                        children: React.createElement(ReactIntl.FormattedMessage, {
                                              id: "save",
                                              defaultMessage: "Save"
                                            })
                                      })
                                }))
                      })
                }), React.createElement(SnackbarYoutube$BtsCore.make, {
                  showYoutube: state.showYoutube,
                  position: "bottomLeft",
                  children: /* tuple */[
                    React.createElement("span", undefined, state.youtubeText),
                    null
                  ]
                }));
}

var make = Store;

export {
  reducer ,
  initialState ,
  make ,
  
}
/*  Not a pure module */

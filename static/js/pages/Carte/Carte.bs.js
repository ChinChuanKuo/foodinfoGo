// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE

import * as List from "bs-platform/lib/es6/list.js";
import * as $$Array from "bs-platform/lib/es6/array.js";
import * as Block from "bs-platform/lib/es6/block.js";
import * as Curry from "bs-platform/lib/es6/curry.js";
import * as React from "react";
import * as Caml_obj from "bs-platform/lib/es6/caml_obj.js";
import * as Caml_array from "bs-platform/lib/es6/caml_array.js";
import * as ReactIntl from "react-intl";
import * as Tab$BtsCore from "../../material-ui/core/Tabs/Tab.bs.js";
import * as Data$BtsCore from "../../features/Data.bs.js";
import * as Path$BtsCore from "../../features/Path.bs.js";
import * as Tabs$BtsCore from "../../material-ui/core/Tabs/Tabs.bs.js";
import * as Icons$BtsCore from "../../material-ui/icon/Icons.bs.js";
import * as Paper$BtsCore from "../../material-ui/core/Paper/Paper.bs.js";
import * as Button$BtsCore from "../../material-ui/core/Button/Button.bs.js";
import * as Status$BtsCore from "../../features/Status.bs.js";
import * as Switch$BtsCore from "../../material-ui/core/Switch/Switch.bs.js";
import * as Tooltip$BtsCore from "../../material-ui/core/Tooltip/Tooltip.bs.js";
import * as Axiosapi$BtsCore from "../../features/Axiosapi.bs.js";
import * as GridItem$BtsCore from "../../material-ui/core/Grid/GridItem.bs.js";
import * as MenuItem$BtsCore from "../../material-ui/core/MenuItem/MenuItem.bs.js";
import * as Together$BtsCore from "../../styles/Together/Together.bs.js";
import * as ReasonReactRouter from "reason-react/src/ReasonReactRouter.js";
import * as IconAction$BtsCore from "../../material-ui/core/IconStyle/IconAction.bs.js";
import * as IconButton$BtsCore from "../../material-ui/core/IconButton/IconButton.bs.js";
import * as SelectMenu$BtsCore from "../../material-ui/core/Menu/SelectMenu.bs.js";
import * as Typography$BtsCore from "../../material-ui/core/Typography/Typography.bs.js";
import * as IconGeneral$BtsCore from "../../material-ui/core/IconStyle/IconGeneral.bs.js";
import * as ImageUpload$BtsCore from "../../example/Uploads/ImageUpload.bs.js";
import * as NewFacetube$BtsCore from "../../example/Facebook/NewFacetube.bs.js";
import * as SwitchColor$BtsCore from "../../controls/SwitchColor.bs.js";
import * as GridContainer$BtsCore from "../../material-ui/core/Grid/GridContainer.bs.js";
import * as IconAnimation$BtsCore from "../../controls/IconAnimation.bs.js";
import * as SelectOutline$BtsCore from "../../material-ui/core/Select/SelectOutline.bs.js";
import * as BackgroundBoard$BtsCore from "../../example/Boards/BackgroundBoard.bs.js";
import * as SnackbarYoutube$BtsCore from "../../material-ui/core/Snackbar/SnackbarYoutube.bs.js";
import * as ProgressCircular$BtsCore from "../../material-ui/core/Progress/ProgressCircular.bs.js";
import * as TextFieldOutline$BtsCore from "../../material-ui/core/TextField/TextFieldOutline.bs.js";
import * as TextFieldStandard$BtsCore from "../../material-ui/core/TextField/TextFieldStandard.bs.js";
import * as TextFieldMultiline$BtsCore from "../../material-ui/core/TextField/TextFieldMultiline.bs.js";

((require('../../../scss/pages/Together/together.scss')));

function reducer(state, action) {
  if (typeof action === "number") {
    switch (action) {
      case /* SettingError */0 :
          var newrecord = Caml_obj.caml_obj_dup(state);
          newrecord.error = !state.error;
          return newrecord;
      case /* ActionShowProgress */1 :
          var newrecord$1 = Caml_obj.caml_obj_dup(state);
          newrecord$1.showProgress = !state.showProgress;
          return newrecord$1;
      case /* ShowChecked */2 :
          var newrecord$2 = Caml_obj.caml_obj_dup(state);
          newrecord$2.checked = !state.checked;
          return newrecord$2;
      case /* RefreshMenuForm */3 :
          var newrecord$3 = Caml_obj.caml_obj_dup(state);
          newrecord$3.items = state.items.filter((function (item) {
                  return item.showDelete !== true;
                }));
          return newrecord$3;
      
    }
  } else {
    switch (action.tag | 0) {
      case /* SettingFormLoad */0 :
          var newrecord$4 = Caml_obj.caml_obj_dup(state);
          newrecord$4.formId = action[0];
          newrecord$4.formLoad = !state.formLoad;
          return newrecord$4;
      case /* SettingFormWidth */1 :
          var newrecord$5 = Caml_obj.caml_obj_dup(state);
          newrecord$5.formHeight = action[1];
          newrecord$5.formWidth = action[0];
          return newrecord$5;
      case /* ActionBadgeItems */2 :
          var newrecord$6 = Caml_obj.caml_obj_dup(state);
          newrecord$6.badge = action[0];
          return newrecord$6;
      case /* ActionPermissItems */3 :
          var newrecord$7 = Caml_obj.caml_obj_dup(state);
          newrecord$7.export = action[3];
          newrecord$7.delete = action[2];
          newrecord$7.update = action[1];
          newrecord$7.insert = action[0];
          return newrecord$7;
      case /* SettingFormItems */4 :
          var newrecord$8 = Caml_obj.caml_obj_dup(state);
          newrecord$8.items = action[3];
          newrecord$8.showItem = true;
          newrecord$8.checked = action[2];
          newrecord$8.desc = action[1];
          newrecord$8.tile = action[0];
          return newrecord$8;
      case /* ChangeFormTitle */5 :
          var newrecord$9 = Caml_obj.caml_obj_dup(state);
          newrecord$9.tile = action[0];
          return newrecord$9;
      case /* ChangeFormDescription */6 :
          var newrecord$10 = Caml_obj.caml_obj_dup(state);
          newrecord$10.desc = action[0];
          return newrecord$10;
      case /* ClickItemTab */7 :
          var index = action[0];
          var newrecord$11 = Caml_obj.caml_obj_dup(state);
          newrecord$11.index = index;
          newrecord$11.tabitems = List.mapi((function (i, tabtitem) {
                  return {
                          showTabt: index === i,
                          tabImage: tabtitem.tabImage,
                          tabPath: tabtitem.tabPath
                        };
                }), state.tabitems);
          return newrecord$11;
      case /* ShowNameDrop */8 :
          var index$1 = action[1];
          var droped = action[0];
          var newrecord$12 = Caml_obj.caml_obj_dup(state);
          newrecord$12.items = $$Array.mapi((function (i, item) {
                  if (index$1 !== i) {
                    return item;
                  }
                  var newrecord = Caml_obj.caml_obj_dup(item);
                  newrecord.showNameDrop = droped;
                  return newrecord;
                }), state.items);
          return newrecord$12;
      case /* ShowNameFile */9 :
          var index$2 = action[1];
          var value = action[0];
          var newrecord$13 = Caml_obj.caml_obj_dup(state);
          newrecord$13.items = $$Array.mapi((function (i, item) {
                  if (index$2 !== i) {
                    return item;
                  }
                  var newrecord = Caml_obj.caml_obj_dup(item);
                  newrecord.showModify = true;
                  newrecord.nameValue = value;
                  newrecord.showNameFile = !item.showNameFile;
                  return newrecord;
                }), state.items);
          return newrecord$13;
      case /* ChangeItemName */10 :
          var index$3 = action[1];
          var value$1 = action[0];
          var newrecord$14 = Caml_obj.caml_obj_dup(state);
          newrecord$14.items = $$Array.mapi((function (i, item) {
                  if (index$3 !== i) {
                    return item;
                  }
                  var newrecord = Caml_obj.caml_obj_dup(item);
                  newrecord.showModify = true;
                  newrecord.nameValue = value$1;
                  return newrecord;
                }), state.items);
          return newrecord$14;
      case /* ShowNameMenu */11 :
          var index$4 = action[0];
          var newrecord$15 = Caml_obj.caml_obj_dup(state);
          newrecord$15.items = $$Array.mapi((function (i, item) {
                  if (index$4 !== i) {
                    return item;
                  }
                  var newrecord = Caml_obj.caml_obj_dup(item);
                  newrecord.showNameMenu = !item.showNameMenu;
                  return newrecord;
                }), state.items);
          return newrecord$15;
      case /* ClickNameMenu */12 :
          var index$5 = action[1];
          var value$2 = action[0];
          var newrecord$16 = Caml_obj.caml_obj_dup(state);
          newrecord$16.items = $$Array.mapi((function (i, item) {
                  if (index$5 !== i) {
                    return item;
                  }
                  var newrecord = Caml_obj.caml_obj_dup(item);
                  newrecord.showModify = true;
                  newrecord.showNameMenu = !item.showNameMenu;
                  newrecord.nameValue = value$2;
                  return newrecord;
                }), state.items);
          return newrecord$16;
      case /* ShowPriceDrop */13 :
          var index$6 = action[1];
          var droped$1 = action[0];
          var newrecord$17 = Caml_obj.caml_obj_dup(state);
          newrecord$17.items = $$Array.mapi((function (i, item) {
                  if (index$6 !== i) {
                    return item;
                  }
                  var newrecord = Caml_obj.caml_obj_dup(item);
                  newrecord.showPriceDrop = droped$1;
                  return newrecord;
                }), state.items);
          return newrecord$17;
      case /* ShowPriceFile */14 :
          var index$7 = action[1];
          var value$3 = action[0];
          var newrecord$18 = Caml_obj.caml_obj_dup(state);
          newrecord$18.items = $$Array.mapi((function (i, item) {
                  if (index$7 !== i) {
                    return item;
                  }
                  var newrecord = Caml_obj.caml_obj_dup(item);
                  newrecord.showModify = true;
                  newrecord.priceValue = value$3;
                  newrecord.showPriceFile = !item.showPriceFile;
                  return newrecord;
                }), state.items);
          return newrecord$18;
      case /* ChangeItemPrice */15 :
          var index$8 = action[1];
          var value$4 = action[0];
          var newrecord$19 = Caml_obj.caml_obj_dup(state);
          newrecord$19.items = $$Array.mapi((function (i, item) {
                  if (index$8 !== i) {
                    return item;
                  }
                  var newrecord = Caml_obj.caml_obj_dup(item);
                  newrecord.showModify = true;
                  newrecord.priceValue = value$4;
                  return newrecord;
                }), state.items);
          return newrecord$19;
      case /* ShowPriceMenu */16 :
          var index$9 = action[0];
          var newrecord$20 = Caml_obj.caml_obj_dup(state);
          newrecord$20.items = $$Array.mapi((function (i, item) {
                  if (index$9 !== i) {
                    return item;
                  }
                  var newrecord = Caml_obj.caml_obj_dup(item);
                  newrecord.showPriceMenu = !item.showPriceMenu;
                  return newrecord;
                }), state.items);
          return newrecord$20;
      case /* ClickPriceMenu */17 :
          var index$10 = action[1];
          var value$5 = action[0];
          var newrecord$21 = Caml_obj.caml_obj_dup(state);
          newrecord$21.items = $$Array.mapi((function (i, item) {
                  if (index$10 !== i) {
                    return item;
                  }
                  var newrecord = Caml_obj.caml_obj_dup(item);
                  newrecord.showModify = true;
                  newrecord.showPriceMenu = !item.showPriceMenu;
                  newrecord.priceValue = value$5;
                  return newrecord;
                }), state.items);
          return newrecord$21;
      case /* ShowAllergyDrop */18 :
          var index$11 = action[1];
          var droped$2 = action[0];
          var newrecord$22 = Caml_obj.caml_obj_dup(state);
          newrecord$22.items = $$Array.mapi((function (i, item) {
                  if (index$11 !== i) {
                    return item;
                  }
                  var newrecord = Caml_obj.caml_obj_dup(item);
                  newrecord.showAllergyDrop = droped$2;
                  return newrecord;
                }), state.items);
          return newrecord$22;
      case /* ShowAllergyFile */19 :
          var index$12 = action[1];
          var value$6 = action[0];
          var newrecord$23 = Caml_obj.caml_obj_dup(state);
          newrecord$23.items = $$Array.mapi((function (i, item) {
                  if (index$12 !== i) {
                    return item;
                  }
                  var newrecord = Caml_obj.caml_obj_dup(item);
                  newrecord.showModify = true;
                  newrecord.allergyValue = value$6;
                  newrecord.showAllergyFile = !item.showAllergyFile;
                  return newrecord;
                }), state.items);
          return newrecord$23;
      case /* ChangeItemAllergy */20 :
          var index$13 = action[1];
          var value$7 = action[0];
          var newrecord$24 = Caml_obj.caml_obj_dup(state);
          newrecord$24.items = $$Array.mapi((function (i, item) {
                  if (index$13 !== i) {
                    return item;
                  }
                  var newrecord = Caml_obj.caml_obj_dup(item);
                  newrecord.showModify = true;
                  newrecord.allergyValue = value$7;
                  return newrecord;
                }), state.items);
          return newrecord$24;
      case /* ShowAllergyMenu */21 :
          var index$14 = action[0];
          var newrecord$25 = Caml_obj.caml_obj_dup(state);
          newrecord$25.items = $$Array.mapi((function (i, item) {
                  if (index$14 !== i) {
                    return item;
                  }
                  var newrecord = Caml_obj.caml_obj_dup(item);
                  newrecord.showAllergyMenu = !item.showAllergyMenu;
                  return newrecord;
                }), state.items);
          return newrecord$25;
      case /* ClickAllergyMenu */22 :
          var index$15 = action[1];
          var value$8 = action[0];
          var newrecord$26 = Caml_obj.caml_obj_dup(state);
          newrecord$26.items = $$Array.mapi((function (i, item) {
                  if (index$15 !== i) {
                    return item;
                  }
                  var newrecord = Caml_obj.caml_obj_dup(item);
                  newrecord.showModify = true;
                  newrecord.showAllergyMenu = !item.showAllergyMenu;
                  newrecord.allergyValue = value$8;
                  return newrecord;
                }), state.items);
          return newrecord$26;
      case /* ShowAlbumDrop */23 :
          var index$16 = action[1];
          var droped$3 = action[0];
          var newrecord$27 = Caml_obj.caml_obj_dup(state);
          newrecord$27.items = $$Array.mapi((function (i, item) {
                  if (index$16 !== i) {
                    return item;
                  }
                  var newrecord = Caml_obj.caml_obj_dup(item);
                  newrecord.showAlbumDrop = droped$3;
                  return newrecord;
                }), state.items);
          return newrecord$27;
      case /* ShowAlbumFile */24 :
          var index$17 = action[1];
          var value$9 = action[0];
          var newrecord$28 = Caml_obj.caml_obj_dup(state);
          newrecord$28.items = $$Array.mapi((function (i, item) {
                  if (index$17 !== i) {
                    return item;
                  }
                  var newrecord = Caml_obj.caml_obj_dup(item);
                  newrecord.showModify = true;
                  newrecord.albumValue = value$9;
                  newrecord.showAlbumFile = !item.showAlbumFile;
                  return newrecord;
                }), state.items);
          return newrecord$28;
      case /* ChangeItemAlbum */25 :
          var index$18 = action[1];
          var value$10 = action[0];
          var newrecord$29 = Caml_obj.caml_obj_dup(state);
          newrecord$29.items = $$Array.mapi((function (i, item) {
                  if (index$18 !== i) {
                    return item;
                  }
                  var newrecord = Caml_obj.caml_obj_dup(item);
                  newrecord.showModify = true;
                  newrecord.albumValue = value$10;
                  return newrecord;
                }), state.items);
          return newrecord$29;
      case /* ShowAlbumMenu */26 :
          var index$19 = action[0];
          var newrecord$30 = Caml_obj.caml_obj_dup(state);
          newrecord$30.items = $$Array.mapi((function (i, item) {
                  if (index$19 !== i) {
                    return item;
                  }
                  var newrecord = Caml_obj.caml_obj_dup(item);
                  newrecord.showAlbumMenu = !item.showAlbumMenu;
                  return newrecord;
                }), state.items);
          return newrecord$30;
      case /* ClickAlbumMenu */27 :
          var index$20 = action[1];
          var value$11 = action[0];
          var newrecord$31 = Caml_obj.caml_obj_dup(state);
          newrecord$31.items = $$Array.mapi((function (i, item) {
                  if (index$20 !== i) {
                    return item;
                  }
                  var newrecord = Caml_obj.caml_obj_dup(item);
                  newrecord.showModify = true;
                  newrecord.showAlbumMenu = !item.showAlbumMenu;
                  newrecord.albumValue = value$11;
                  return newrecord;
                }), state.items);
          return newrecord$31;
      case /* ShowRemarkDrop */28 :
          var index$21 = action[1];
          var droped$4 = action[0];
          var newrecord$32 = Caml_obj.caml_obj_dup(state);
          newrecord$32.items = $$Array.mapi((function (i, item) {
                  if (index$21 !== i) {
                    return item;
                  }
                  var newrecord = Caml_obj.caml_obj_dup(item);
                  newrecord.showRemarkDrop = droped$4;
                  return newrecord;
                }), state.items);
          return newrecord$32;
      case /* ShowRemarkFile */29 :
          var index$22 = action[1];
          var value$12 = action[0];
          var newrecord$33 = Caml_obj.caml_obj_dup(state);
          newrecord$33.items = $$Array.mapi((function (i, item) {
                  if (index$22 !== i) {
                    return item;
                  }
                  var newrecord = Caml_obj.caml_obj_dup(item);
                  newrecord.showModify = true;
                  newrecord.remarkValue = value$12;
                  newrecord.showRemarkFile = !item.showRemarkFile;
                  return newrecord;
                }), state.items);
          return newrecord$33;
      case /* ChangeItemRemark */30 :
          var index$23 = action[1];
          var value$13 = action[0];
          var newrecord$34 = Caml_obj.caml_obj_dup(state);
          newrecord$34.items = $$Array.mapi((function (i, item) {
                  if (index$23 !== i) {
                    return item;
                  }
                  var newrecord = Caml_obj.caml_obj_dup(item);
                  newrecord.showModify = true;
                  newrecord.remarkValue = value$13;
                  return newrecord;
                }), state.items);
          return newrecord$34;
      case /* ShowRemarkMenu */31 :
          var index$24 = action[0];
          var newrecord$35 = Caml_obj.caml_obj_dup(state);
          newrecord$35.items = $$Array.mapi((function (i, item) {
                  if (index$24 !== i) {
                    return item;
                  }
                  var newrecord = Caml_obj.caml_obj_dup(item);
                  newrecord.showRemarkMenu = !item.showRemarkMenu;
                  return newrecord;
                }), state.items);
          return newrecord$35;
      case /* ClickRemarkMenu */32 :
          var index$25 = action[1];
          var value$14 = action[0];
          var newrecord$36 = Caml_obj.caml_obj_dup(state);
          newrecord$36.items = $$Array.mapi((function (i, item) {
                  if (index$25 !== i) {
                    return item;
                  }
                  var newrecord = Caml_obj.caml_obj_dup(item);
                  newrecord.showModify = true;
                  newrecord.showRemarkMenu = !item.showRemarkMenu;
                  newrecord.remarkValue = value$14;
                  return newrecord;
                }), state.items);
          return newrecord$36;
      case /* ShowMenuForm */33 :
          var mindex = action[0];
          var newrecord$37 = Caml_obj.caml_obj_dup(state);
          newrecord$37.items = $$Array.mapi((function (mi, item) {
                  if (mindex !== mi) {
                    return item;
                  }
                  var newrecord = Caml_obj.caml_obj_dup(item);
                  newrecord.showMore = !item.showMore;
                  return newrecord;
                }), state.items);
          return newrecord$37;
      case /* DeleteMenuForm */34 :
          var mindex$1 = action[0];
          var newrecord$38 = Caml_obj.caml_obj_dup(state);
          newrecord$38.items = $$Array.mapi((function (mi, item) {
                  if (mindex$1 !== mi) {
                    return item;
                  }
                  var newrecord = Caml_obj.caml_obj_dup(item);
                  newrecord.showDelete = !item.showDelete;
                  return newrecord;
                }), state.items);
          return newrecord$38;
      case /* AddMenuForm */35 :
          var newrecord$39 = Caml_obj.caml_obj_dup(state);
          newrecord$39.items = $$Array.append(state.items, action[0]);
          return newrecord$39;
      case /* ActionSnackBar */36 :
          var newrecord$40 = Caml_obj.caml_obj_dup(state);
          newrecord$40.youtubeText = action[0];
          newrecord$40.showYoutube = action[1];
          return newrecord$40;
      
    }
  }
}

var initialState_tabitems = /* :: */[
  {
    showTabt: false,
    tabImage: Icons$BtsCore.storeBlack,
    tabPath: Path$BtsCore.storePath
  },
  /* :: */[
    {
      showTabt: false,
      tabImage: Icons$BtsCore.menuBookBlack,
      tabPath: Path$BtsCore.cartePath
    },
    /* :: */[
      {
        showTabt: true,
        tabImage: Icons$BtsCore.todayBlack,
        tabPath: Path$BtsCore.busdatePath
      },
      /* :: */[
        {
          showTabt: false,
          tabImage: Icons$BtsCore.insertInvitationBlack,
          tabPath: Path$BtsCore.fesdatePath
        },
        /* [] */0
      ]
    ]
  ]
];

var initialState_items = [];

var initialState = {
  formLoad: false,
  formWidth: 0,
  formHeight: 0,
  showProgress: true,
  error: false,
  badge: "",
  insert: false,
  update: false,
  delete: false,
  export: false,
  formId: "",
  tile: "",
  desc: "",
  checked: false,
  tabitems: initialState_tabitems,
  index: 1,
  showItem: false,
  items: initialState_items,
  showYoutube: false,
  youtubeText: ""
};

function Carte(Props) {
  var match = React.useReducer(reducer, initialState);
  var dispatch = match[1];
  var state = match[0];
  var maxHeight = String(state.formHeight - 365 | 0) + "px";
  var fileRef = React.useRef(null);
  var barShowRestoreAction = function (youtubeText) {
    Curry._1(dispatch, /* ActionSnackBar */Block.__(36, [
            youtubeText,
            true
          ]));
    setTimeout((function (param) {
            return Curry._1(dispatch, /* ActionSnackBar */Block.__(36, [
                          "",
                          false
                        ]));
          }), 5000);
    
  };
  var searchAJax = function (formId) {
    Axiosapi$BtsCore.Carte.search(Data$BtsCore.dFormData(formId, localStorage.getItem("newid"))).then((function (response) {
              var match = response.data.status;
              var tmp;
              if (match === "istrue") {
                Curry._1(dispatch, /* SettingFormItems */Block.__(4, [
                        response.data.tile,
                        response.data.desc,
                        response.data.checked,
                        response.data.items
                      ]));
                tmp = Curry._1(dispatch, /* ActionShowProgress */1);
              } else {
                Curry._1(dispatch, /* SettingError */0);
                barShowRestoreAction(Status$BtsCore.statusModule(response.data.status));
                tmp = Curry._1(dispatch, /* ActionShowProgress */1);
              }
              return Promise.resolve(tmp);
            })).catch((function (error) {
            return Promise.resolve((console.log(error), undefined));
          }));
    
  };
  var permissAJax = function (param) {
    Axiosapi$BtsCore.Form.permiss(Data$BtsCore.userData(localStorage.getItem("newid"))).then((function (response) {
              return Promise.resolve((Curry._1(dispatch, /* ActionPermissItems */Block.__(3, [
                                  response.data.insert,
                                  response.data.update,
                                  response.data.delete,
                                  response.data.export
                                ])), searchAJax(ReasonReactRouter.dangerouslyGetInitialUrl(undefined).hash)));
            })).catch((function (error) {
            return Promise.resolve((console.log(error), undefined));
          }));
    
  };
  React.useEffect((function () {
          if (state.formLoad) {
            return (function (param) {
                      console.log("action");
                      
                    });
          }
          Curry._1(dispatch, /* SettingFormLoad */Block.__(0, [ReasonReactRouter.dangerouslyGetInitialUrl(undefined).hash]));
          Curry._1(dispatch, /* SettingFormWidth */Block.__(1, [
                  window.innerWidth,
                  window.innerHeight
                ]));
          var timeId = permissAJax(undefined);
          return (function (param) {
                    return timeId;
                  });
        }));
  var handleResize = function ($$event) {
    return Curry._1(dispatch, /* SettingFormWidth */Block.__(1, [
                  $$event.currentTarget.innerWidth,
                  $$event.currentTarget.innerHeight
                ]));
  };
  React.useEffect((function () {
          var watcherId = ReasonReactRouter.watchUrl((function (url) {
                  Curry._1(dispatch, /* SettingFormLoad */Block.__(0, [ReasonReactRouter.dangerouslyGetInitialUrl(undefined).hash]));
                  return Curry._1(dispatch, /* ActionShowProgress */1);
                }));
          window.addEventListener("resize", handleResize, true);
          return (function (param) {
                    ReasonReactRouter.unwatchUrl(watcherId);
                    
                  });
        }), ([]));
  var changeFormTitle = React.useCallback((function (value) {
          return Curry._1(dispatch, /* ChangeFormTitle */Block.__(5, [value]));
        }));
  var changeFormDescription = React.useCallback((function (value) {
          return Curry._1(dispatch, /* ChangeFormDescription */Block.__(6, [value]));
        }));
  var showChecked = React.useCallback((function (param) {
          return Curry._1(dispatch, /* ShowChecked */2);
        }));
  var clickItemTab = React.useCallback((function (i) {
          return (function (tabPath) {
              Curry._1(dispatch, /* ClickItemTab */Block.__(7, [i]));
              return ReasonReactRouter.push(tabPath + ("#" + state.formId));
            });
        }));
  var upNameAJax = function (file, i) {
    var formData = new FormData();
    formData.append("file", file);
    Axiosapi$BtsCore.Files.upload(formData).then((function (response) {
              var match = response.data.status;
              var tmp;
              if (match === "istrue") {
                Curry._1(dispatch, /* ShowNameFile */Block.__(9, [
                        response.data.file,
                        i
                      ]));
                tmp = Curry._1(dispatch, /* ActionShowProgress */1);
              } else {
                barShowRestoreAction(Status$BtsCore.uploadModels(response.data.status));
                tmp = Curry._1(dispatch, /* ActionShowProgress */1);
              }
              return Promise.resolve(tmp);
            })).catch((function (error) {
            return Promise.resolve((console.log(error), undefined));
          }));
    
  };
  var dragOverName = React.useCallback((function ($$event) {
          return (function (i) {
              $$event.preventDefault();
              $$event.stopPropagation();
              return Curry._1(dispatch, /* ShowNameDrop */Block.__(8, [
                            true,
                            i
                          ]));
            });
        }));
  var dragLeaveName = React.useCallback((function ($$event) {
          return (function (i) {
              $$event.preventDefault();
              $$event.stopPropagation();
              return Curry._1(dispatch, /* ShowNameDrop */Block.__(8, [
                            false,
                            i
                          ]));
            });
        }));
  var dropItemName = React.useCallback((function ($$event) {
          return (function (value, i) {
              $$event.preventDefault();
              $$event.stopPropagation();
              Curry._1(dispatch, /* ActionShowProgress */1);
              Curry._1(dispatch, /* ShowNameDrop */Block.__(8, [
                      false,
                      i
                    ]));
              return upNameAJax(value, i);
            });
        }));
  var uploadItemName = React.useCallback((function (value) {
          return (function (i) {
              Curry._1(dispatch, /* ActionShowProgress */1);
              return upNameAJax(value, i);
            });
        }));
  var changeItemName = React.useCallback((function (value) {
          return (function (i) {
              return Curry._1(dispatch, /* ChangeItemName */Block.__(10, [
                            value,
                            i
                          ]));
            });
        }));
  var showNameMenu = React.useCallback((function (i) {
          return Curry._1(dispatch, /* ShowNameMenu */Block.__(11, [i]));
        }));
  var clickNameMenu = React.useCallback((function (value) {
          return (function (i) {
              return Curry._1(dispatch, /* ClickNameMenu */Block.__(12, [
                            value,
                            i
                          ]));
            });
        }));
  var upPriceAJax = function (file, i) {
    var formData = new FormData();
    formData.append("file", file);
    Axiosapi$BtsCore.Files.upload(formData).then((function (response) {
              var match = response.data.status;
              var tmp;
              if (match === "istrue") {
                Curry._1(dispatch, /* ShowPriceFile */Block.__(14, [
                        response.data.file,
                        i
                      ]));
                tmp = Curry._1(dispatch, /* ActionShowProgress */1);
              } else {
                barShowRestoreAction(Status$BtsCore.uploadModels(response.data.status));
                tmp = Curry._1(dispatch, /* ActionShowProgress */1);
              }
              return Promise.resolve(tmp);
            })).catch((function (error) {
            return Promise.resolve((console.log(error), undefined));
          }));
    
  };
  var dragOverPrice = React.useCallback((function ($$event) {
          return (function (i) {
              $$event.preventDefault();
              $$event.stopPropagation();
              return Curry._1(dispatch, /* ShowPriceDrop */Block.__(13, [
                            true,
                            i
                          ]));
            });
        }));
  var dragLeavePrice = React.useCallback((function ($$event) {
          return (function (i) {
              $$event.preventDefault();
              $$event.stopPropagation();
              return Curry._1(dispatch, /* ShowPriceDrop */Block.__(13, [
                            false,
                            i
                          ]));
            });
        }));
  var dropItemPrice = React.useCallback((function ($$event) {
          return (function (value, i) {
              $$event.preventDefault();
              $$event.stopPropagation();
              Curry._1(dispatch, /* ActionShowProgress */1);
              Curry._1(dispatch, /* ShowPriceDrop */Block.__(13, [
                      false,
                      i
                    ]));
              return upPriceAJax(value, i);
            });
        }));
  var uploadItemPrice = React.useCallback((function (value) {
          return (function (i) {
              Curry._1(dispatch, /* ActionShowProgress */1);
              return upPriceAJax(value, i);
            });
        }));
  var changeItemPrice = React.useCallback((function (value) {
          return (function (i) {
              return Curry._1(dispatch, /* ChangeItemPrice */Block.__(15, [
                            value,
                            i
                          ]));
            });
        }));
  var showPriceMenu = React.useCallback((function (i) {
          return Curry._1(dispatch, /* ShowPriceMenu */Block.__(16, [i]));
        }));
  var clickPriceMenu = React.useCallback((function (value) {
          return (function (i) {
              return Curry._1(dispatch, /* ClickPriceMenu */Block.__(17, [
                            value,
                            i
                          ]));
            });
        }));
  var upAllergyAJax = function (file, i) {
    var formData = new FormData();
    formData.append("file", file);
    Axiosapi$BtsCore.Files.upload(formData).then((function (response) {
              var match = response.data.status;
              var tmp;
              if (match === "istrue") {
                Curry._1(dispatch, /* ShowAllergyFile */Block.__(19, [
                        response.data.file,
                        i
                      ]));
                tmp = Curry._1(dispatch, /* ActionShowProgress */1);
              } else {
                barShowRestoreAction(Status$BtsCore.uploadModels(response.data.status));
                tmp = Curry._1(dispatch, /* ActionShowProgress */1);
              }
              return Promise.resolve(tmp);
            })).catch((function (error) {
            return Promise.resolve((console.log(error), undefined));
          }));
    
  };
  var dragOverAllergy = React.useCallback((function ($$event) {
          return (function (i) {
              $$event.preventDefault();
              $$event.stopPropagation();
              return Curry._1(dispatch, /* ShowAllergyDrop */Block.__(18, [
                            true,
                            i
                          ]));
            });
        }));
  var dragLeaveAllergy = React.useCallback((function ($$event) {
          return (function (i) {
              $$event.preventDefault();
              $$event.stopPropagation();
              return Curry._1(dispatch, /* ShowAllergyDrop */Block.__(18, [
                            false,
                            i
                          ]));
            });
        }));
  var dropItemAllergy = React.useCallback((function ($$event) {
          return (function (value, i) {
              $$event.preventDefault();
              $$event.stopPropagation();
              Curry._1(dispatch, /* ActionShowProgress */1);
              Curry._1(dispatch, /* ShowAllergyDrop */Block.__(18, [
                      false,
                      i
                    ]));
              return upAllergyAJax(value, i);
            });
        }));
  var uploadItemAllergy = React.useCallback((function (value) {
          return (function (i) {
              Curry._1(dispatch, /* ActionShowProgress */1);
              return upAllergyAJax(value, i);
            });
        }));
  var changeItemAllergy = React.useCallback((function (value) {
          return (function (i) {
              return Curry._1(dispatch, /* ChangeItemAllergy */Block.__(20, [
                            value,
                            i
                          ]));
            });
        }));
  var showAllergyMenu = React.useCallback((function (i) {
          return Curry._1(dispatch, /* ShowAllergyMenu */Block.__(21, [i]));
        }));
  var clickAllergyMenu = React.useCallback((function (value) {
          return (function (i) {
              return Curry._1(dispatch, /* ClickAllergyMenu */Block.__(22, [
                            value,
                            i
                          ]));
            });
        }));
  var upAlbumAJax = function (file, i) {
    var formData = new FormData();
    formData.append("file", file);
    Axiosapi$BtsCore.Files.upload(formData).then((function (response) {
              var match = response.data.status;
              var tmp;
              if (match === "istrue") {
                Curry._1(dispatch, /* ShowAlbumFile */Block.__(24, [
                        response.data.file,
                        i
                      ]));
                tmp = Curry._1(dispatch, /* ActionShowProgress */1);
              } else {
                barShowRestoreAction(Status$BtsCore.uploadModels(response.data.status));
                tmp = Curry._1(dispatch, /* ActionShowProgress */1);
              }
              return Promise.resolve(tmp);
            })).catch((function (error) {
            return Promise.resolve((console.log(error), undefined));
          }));
    
  };
  var dragOverAlbum = React.useCallback((function ($$event) {
          return (function (i) {
              $$event.preventDefault();
              $$event.stopPropagation();
              return Curry._1(dispatch, /* ShowAlbumDrop */Block.__(23, [
                            true,
                            i
                          ]));
            });
        }));
  var dragLeaveAlbum = React.useCallback((function ($$event) {
          return (function (i) {
              $$event.preventDefault();
              $$event.stopPropagation();
              return Curry._1(dispatch, /* ShowAlbumDrop */Block.__(23, [
                            false,
                            i
                          ]));
            });
        }));
  var dropItemAlbum = React.useCallback((function ($$event) {
          return (function (value, i) {
              $$event.preventDefault();
              $$event.stopPropagation();
              Curry._1(dispatch, /* ActionShowProgress */1);
              Curry._1(dispatch, /* ShowAlbumDrop */Block.__(23, [
                      false,
                      i
                    ]));
              return upAlbumAJax(value, i);
            });
        }));
  var uploadItemAlbum = React.useCallback((function (value) {
          return (function (i) {
              Curry._1(dispatch, /* ActionShowProgress */1);
              return upAlbumAJax(value, i);
            });
        }));
  var changeItemAlbum = React.useCallback((function (value) {
          return (function (i) {
              return Curry._1(dispatch, /* ChangeItemAlbum */Block.__(25, [
                            value,
                            i
                          ]));
            });
        }));
  var showAlbumMenu = React.useCallback((function (i) {
          return Curry._1(dispatch, /* ShowAlbumMenu */Block.__(26, [i]));
        }));
  var clickAlbumMenu = React.useCallback((function (value) {
          return (function (i) {
              return Curry._1(dispatch, /* ClickAlbumMenu */Block.__(27, [
                            value,
                            i
                          ]));
            });
        }));
  var upRemarkAJax = function (file, i) {
    var formData = new FormData();
    formData.append("file", file);
    Axiosapi$BtsCore.Files.upload(formData).then((function (response) {
              var match = response.data.status;
              var tmp;
              if (match === "istrue") {
                Curry._1(dispatch, /* ShowRemarkFile */Block.__(29, [
                        response.data.file,
                        i
                      ]));
                tmp = Curry._1(dispatch, /* ActionShowProgress */1);
              } else {
                barShowRestoreAction(Status$BtsCore.uploadModels(response.data.status));
                tmp = Curry._1(dispatch, /* ActionShowProgress */1);
              }
              return Promise.resolve(tmp);
            })).catch((function (error) {
            return Promise.resolve((console.log(error), undefined));
          }));
    
  };
  var dragOverRemark = React.useCallback((function ($$event) {
          return (function (i) {
              $$event.preventDefault();
              $$event.stopPropagation();
              return Curry._1(dispatch, /* ShowRemarkDrop */Block.__(28, [
                            true,
                            i
                          ]));
            });
        }));
  var dragLeaveRemark = React.useCallback((function ($$event) {
          return (function (i) {
              $$event.preventDefault();
              $$event.stopPropagation();
              return Curry._1(dispatch, /* ShowRemarkDrop */Block.__(28, [
                            false,
                            i
                          ]));
            });
        }));
  var dropItemRemark = React.useCallback((function ($$event) {
          return (function (value, i) {
              $$event.preventDefault();
              $$event.stopPropagation();
              Curry._1(dispatch, /* ActionShowProgress */1);
              Curry._1(dispatch, /* ShowRemarkDrop */Block.__(28, [
                      false,
                      i
                    ]));
              return upRemarkAJax(value, i);
            });
        }));
  var uploadItemRemark = React.useCallback((function (value) {
          return (function (i) {
              Curry._1(dispatch, /* ActionShowProgress */1);
              return upRemarkAJax(value, i);
            });
        }));
  var changeItemRemark = React.useCallback((function (value) {
          return (function (i) {
              return Curry._1(dispatch, /* ChangeItemRemark */Block.__(30, [
                            value,
                            i
                          ]));
            });
        }));
  var showRemarkMenu = React.useCallback((function (i) {
          return Curry._1(dispatch, /* ShowRemarkMenu */Block.__(31, [i]));
        }));
  var clickRemarkMenu = React.useCallback((function (value) {
          return (function (i) {
              return Curry._1(dispatch, /* ClickRemarkMenu */Block.__(32, [
                            value,
                            i
                          ]));
            });
        }));
  var chooseFile = React.useCallback((function (param) {
          var el = fileRef.current;
          if (!(el == null)) {
            el.click();
            return ;
          }
          
        }));
  var showMenuForm = React.useCallback((function (i) {
          return Curry._1(dispatch, /* ShowMenuForm */Block.__(33, [i]));
        }));
  var deleteMenuForm = React.useCallback((function (i) {
          return Curry._1(dispatch, /* DeleteMenuForm */Block.__(34, [i]));
        }));
  var addMenuItem = React.useCallback((function (param) {
          Curry._1(dispatch, /* ActionShowProgress */1);
          Axiosapi$BtsCore.Carte.addMenu(Data$BtsCore.iItemsData(state.items, localStorage.getItem("newid"))).then((function (response) {
                    var match = response.data.status;
                    var tmp;
                    if (match === "istrue") {
                      Curry._1(dispatch, /* AddMenuForm */Block.__(35, [response.data.items]));
                      tmp = Curry._1(dispatch, /* ActionShowProgress */1);
                    } else {
                      barShowRestoreAction(Status$BtsCore.statusModule(response.data.status));
                      tmp = Curry._1(dispatch, /* ActionShowProgress */1);
                    }
                    return Promise.resolve(tmp);
                  })).catch((function (error) {
                  return Promise.resolve((console.log(error), undefined));
                }));
          
        }));
  var insertForm = React.useCallback((function (param) {
          Curry._1(dispatch, /* ActionShowProgress */1);
          Axiosapi$BtsCore.Carte.insert(Data$BtsCore.iFormData(state.formId, state.tile, state.desc, state.items.filter((function (item) {
                              if (item.showModify === true || item.showDelete === true) {
                                return true;
                              } else {
                                return item.showCreate === true;
                              }
                            })), localStorage.getItem("newid"))).then((function (response) {
                    var match = response.data.status;
                    var tmp;
                    if (match === "istrue") {
                      Curry._1(dispatch, /* RefreshMenuForm */3);
                      barShowRestoreAction(Status$BtsCore.statusModule("sendSuccess"));
                      tmp = Curry._1(dispatch, /* ActionShowProgress */1);
                    } else {
                      barShowRestoreAction(Status$BtsCore.statusModule(response.data.status));
                      tmp = Curry._1(dispatch, /* ActionShowProgress */1);
                    }
                    return Promise.resolve(tmp);
                  })).catch((function (error) {
                  return Promise.resolve((console.log(error), undefined));
                }));
          
        }));
  var match$1 = state.items.length;
  return React.createElement(React.Fragment, undefined, React.createElement(NewFacetube$BtsCore.make, {
                  showProgress: state.showProgress,
                  error: state.error,
                  children: React.createElement(GridItem$BtsCore.make, {
                        style: Together$BtsCore.marginAuto,
                        top: "0",
                        right: "0",
                        bottom: "0",
                        left: "0",
                        xs: "12",
                        maxWidth: "770px",
                        children: React.createElement(GridContainer$BtsCore.make, {
                              direction: "column",
                              justify: "center",
                              alignItem: "stretch",
                              children: null
                            }, React.createElement(GridItem$BtsCore.make, {
                                  top: "0",
                                  right: "24",
                                  bottom: "0",
                                  left: "24",
                                  xs: "auto",
                                  children: React.createElement(GridContainer$BtsCore.make, {
                                        direction: "row",
                                        justify: "center",
                                        alignItem: "center",
                                        children: null
                                      }, React.createElement(GridItem$BtsCore.make, {
                                            top: "0",
                                            bottom: "0",
                                            left: "0",
                                            xs: "auto",
                                            children: React.createElement(TextFieldStandard$BtsCore.make, {
                                                  labelColor: "rgba(255,0,0,0.8)",
                                                  enterBorderColor: "rgba(255,0,0,0.8)",
                                                  downBorderColor: "rgba(255,0,0,0.6)",
                                                  borderColor: "rgba(0,0,0,0.2)",
                                                  placeholder: "Project Tile",
                                                  value: state.tile,
                                                  disabled: state.showProgress,
                                                  onChange: (function ($$event) {
                                                      return Curry._1(changeFormTitle, $$event.target.value);
                                                    }),
                                                  children: React.createElement(ReactIntl.FormattedMessage, {
                                                        id: "Together.name",
                                                        defaultMessage: "Name"
                                                      })
                                                })
                                          }), React.createElement(GridItem$BtsCore.make, {
                                            top: "0",
                                            right: "0",
                                            bottom: "0",
                                            left: "0",
                                            xs: "no",
                                            children: React.createElement(Switch$BtsCore.make, {
                                                  checked: state.checked,
                                                  circleColor: SwitchColor$BtsCore.circle(state.checked),
                                                  linearColor: SwitchColor$BtsCore.linear(state.checked),
                                                  fontColor: SwitchColor$BtsCore.font(state.checked),
                                                  disabled: state.showProgress,
                                                  onClick: showChecked,
                                                  children: React.createElement(Typography$BtsCore.make, {
                                                        variant: "subtitle1",
                                                        color: "rgba(255,0,0,1)",
                                                        fontWeight: "bolder",
                                                        children: React.createElement(ReactIntl.FormattedMessage, {
                                                              id: "release",
                                                              defaultMessage: "Release"
                                                            })
                                                      })
                                                })
                                          }))
                                }), React.createElement(GridItem$BtsCore.make, {
                                  top: "0",
                                  right: "24",
                                  left: "24",
                                  xs: "auto",
                                  children: React.createElement(TextFieldStandard$BtsCore.make, {
                                        labelColor: "rgba(255,0,0,0.8)",
                                        enterBorderColor: "rgba(255,0,0,0.8)",
                                        downBorderColor: "rgba(255,0,0,0.6)",
                                        borderColor: "rgba(0,0,0,0.2)",
                                        placeholder: "Project Desc",
                                        value: state.desc,
                                        disabled: state.showProgress,
                                        onChange: (function ($$event) {
                                            return Curry._1(changeFormDescription, $$event.target.value);
                                          }),
                                        children: React.createElement(ReactIntl.FormattedMessage, {
                                              id: "Together.remark",
                                              defaultMessage: "Remark"
                                            })
                                      })
                                }), React.createElement(GridItem$BtsCore.make, {
                                  top: "0",
                                  right: "24",
                                  bottom: "0",
                                  left: "24",
                                  xs: "auto",
                                  children: React.createElement(Tabs$BtsCore.make, {
                                        id: "bus-",
                                        index: state.index,
                                        short: 20,
                                        height: "3",
                                        children: $$Array.of_list(List.mapi((function (i, tabtitem) {
                                                    return React.createElement(Tab$BtsCore.make, {
                                                                showTab: tabtitem.showTabt,
                                                                maxWidth: "111.6",
                                                                borderRadius: "15",
                                                                id: "bus-" + String(i),
                                                                animationName: "none",
                                                                onClick: (function (param) {
                                                                    return Curry._2(clickItemTab, i, tabtitem.tabPath);
                                                                  }),
                                                                children: React.createElement(IconAction$BtsCore.make, {
                                                                      width: "28",
                                                                      height: "28",
                                                                      animation: "leftRight",
                                                                      src: tabtitem.tabImage
                                                                    })
                                                              });
                                                  }), state.tabitems))
                                      })
                                }), match$1 !== 0 ? React.createElement(React.Fragment, undefined, React.createElement(GridItem$BtsCore.make, {
                                        style: {
                                          position: "sticky",
                                          top: "0px",
                                          zIndex: "1000"
                                        },
                                        right: "24",
                                        bottom: "0",
                                        left: "24",
                                        xs: "auto",
                                        children: React.createElement(Button$BtsCore.make, {
                                              enterBackgroundColor: "rgba(255,0,0,0.8)",
                                              downBackgroundColor: "rgba(255,0,0,0.6)",
                                              backgroundColor: "rgba(255,0,0,0.8)",
                                              width: "100%",
                                              size: "large",
                                              disabled: state.showProgress,
                                              onClick: addMenuItem,
                                              children: React.createElement(ReactIntl.FormattedMessage, {
                                                    id: "Carte.menu",
                                                    defaultMessage: "Menu"
                                                  })
                                            })
                                      }), $$Array.mapi((function (i, item) {
                                          var tmp;
                                          if (item.showName) {
                                            var match = item.nameOutValue;
                                            switch (match) {
                                              case "image" :
                                                  tmp = React.createElement(ImageUpload$BtsCore.make, {
                                                        webLoad: state.showProgress,
                                                        showDrop: item.showNameDrop,
                                                        showFile: item.showNameFile,
                                                        src: item.nameValue,
                                                        fileRef: fileRef,
                                                        onDragOver: (function ($$event) {
                                                            return Curry._2(dragOverName, $$event, i);
                                                          }),
                                                        onDragLeave: (function ($$event) {
                                                            return Curry._2(dragLeaveName, $$event, i);
                                                          }),
                                                        onDrop: (function ($$event) {
                                                            return Curry._3(dropItemName, $$event, Caml_array.caml_array_get($$event.nativeEvent.dataTransfer.files, 0), i);
                                                          }),
                                                        disabled: state.showProgress || item.showDelete,
                                                        onClick: chooseFile,
                                                        onChange: (function ($$event) {
                                                            return Curry._2(uploadItemName, Caml_array.caml_array_get($$event.target.files, 0), i);
                                                          })
                                                      });
                                                  break;
                                              case "label" :
                                                  tmp = React.createElement(Typography$BtsCore.make, {
                                                        variant: "subtitle2",
                                                        style: {
                                                          paddingRight: "6px",
                                                          paddingLeft: "6px"
                                                        },
                                                        noWrap: true,
                                                        children: item.nameValue
                                                      });
                                                  break;
                                              case "text" :
                                                  tmp = React.createElement(TextFieldOutline$BtsCore.make, {
                                                        width: "50",
                                                        top: "0",
                                                        bottom: "0",
                                                        left: "0",
                                                        labelColor: "rgba(255,0,0,0.8)",
                                                        borderTop: "10",
                                                        borderBottom: "10",
                                                        enterBorderColor: "rgba(255,0,0,0.8)",
                                                        downBorderColor: "rgba(255,0,0,0.6)",
                                                        borderColor: "rgba(0,0,0,0.2)",
                                                        value: item.nameValue,
                                                        disabled: state.showProgress || item.showDelete,
                                                        onChange: (function ($$event) {
                                                            return Curry._2(changeItemName, $$event.target.value, i);
                                                          }),
                                                        children: item.nameTitle
                                                      });
                                                  break;
                                              case "textarea" :
                                                  tmp = React.createElement(TextFieldOutline$BtsCore.make, {
                                                        top: "0",
                                                        bottom: "0",
                                                        left: "0",
                                                        labelColor: "rgba(255,0,0,0.8)",
                                                        borderTop: "10",
                                                        borderBottom: "10",
                                                        enterBorderColor: "rgba(255,0,0,0.8)",
                                                        downBorderColor: "rgba(255,0,0,0.6)",
                                                        borderColor: "rgba(0,0,0,0.2)",
                                                        value: item.nameValue,
                                                        disabled: state.showProgress || item.showDelete,
                                                        onChange: (function ($$event) {
                                                            return Curry._2(changeItemName, $$event.target.value, i);
                                                          }),
                                                        children: item.nameTitle
                                                      });
                                                  break;
                                              case "textline" :
                                                  tmp = React.createElement(TextFieldMultiline$BtsCore.make, {
                                                        top: "0",
                                                        bottom: "0",
                                                        left: "0",
                                                        labelColor: "rgba(255,0,0,0.8)",
                                                        borderTop: "10",
                                                        borderBottom: "10",
                                                        enterBorderColor: "rgba(255,0,0,0.8)",
                                                        downBorderColor: "rgba(255,0,0,0.6)",
                                                        borderColor: "rgba(0,0,0,0.2)",
                                                        rows: 3,
                                                        value: item.nameValue,
                                                        disabled: state.showProgress || item.showDelete,
                                                        onChange: (function ($$event) {
                                                            return Curry._2(changeItemName, $$event.target.value, i);
                                                          }),
                                                        children: item.nameTitle
                                                      });
                                                  break;
                                              default:
                                                tmp = React.createElement(React.Fragment, undefined, React.createElement(SelectOutline$BtsCore.make, {
                                                          top: "0",
                                                          bottom: "0",
                                                          left: "0",
                                                          labelColor: "rgba(255,0,0,0.8)",
                                                          tile: item.nameTitle,
                                                          enterBorderColor: "rgba(255,0,0,0.8)",
                                                          downBorderColor: "rgba(255,0,0,0.6)",
                                                          borderColor: "rgba(0,0,0,0.2)",
                                                          value: item.nameValue,
                                                          disabled: state.showProgress || item.showDelete,
                                                          onClick: (function (param) {
                                                              return Curry._1(showNameMenu, i);
                                                            }),
                                                          children: /* tuple */[
                                                            item.showNameMenu ? React.createElement(SelectMenu$BtsCore.make, {
                                                                    top: "50%",
                                                                    transform: "translate(0, -50%)",
                                                                    maxHeight: "280",
                                                                    minHeight: "0",
                                                                    topLeft: "12",
                                                                    topRight: "12",
                                                                    bottomRight: "12",
                                                                    bottomLeft: "12",
                                                                    paddingRight: "8",
                                                                    paddingLeft: "8",
                                                                    children: $$Array.map((function (nameitem) {
                                                                            return React.createElement(MenuItem$BtsCore.make, {
                                                                                        top: "0",
                                                                                        right: "8",
                                                                                        bottom: "0",
                                                                                        left: "8",
                                                                                        disablePadding: nameitem.optionPadding,
                                                                                        topLeft: "12",
                                                                                        topRight: "12",
                                                                                        bottomRight: "12",
                                                                                        bottomLeft: "12",
                                                                                        onClick: (function (param) {
                                                                                            return Curry._2(clickNameMenu, nameitem.value, i);
                                                                                          }),
                                                                                        children: nameitem.value
                                                                                      });
                                                                          }), item.nameitems)
                                                                  }) : null,
                                                            React.createElement(IconGeneral$BtsCore.make, {
                                                                  animation: IconAnimation$BtsCore.topDownRorate(item.showNameMenu),
                                                                  src: Icons$BtsCore.arrowDownBlack
                                                                })
                                                          ]
                                                        }), React.createElement(BackgroundBoard$BtsCore.make, {
                                                          showBackground: item.showNameMenu,
                                                          backgroundColor: "transparent",
                                                          onClick: (function (param) {
                                                              return Curry._1(showNameMenu, i);
                                                            })
                                                        }));
                                            }
                                          } else {
                                            tmp = null;
                                          }
                                          var tmp$1;
                                          if (item.showPrice) {
                                            var match$1 = item.priceOutValue;
                                            switch (match$1) {
                                              case "image" :
                                                  tmp$1 = React.createElement(ImageUpload$BtsCore.make, {
                                                        webLoad: state.showProgress,
                                                        showDrop: item.showPriceDrop,
                                                        showFile: item.showPriceFile,
                                                        src: item.priceValue,
                                                        fileRef: fileRef,
                                                        onDragOver: (function ($$event) {
                                                            return Curry._2(dragOverPrice, $$event, i);
                                                          }),
                                                        onDragLeave: (function ($$event) {
                                                            return Curry._2(dragLeavePrice, $$event, i);
                                                          }),
                                                        onDrop: (function ($$event) {
                                                            return Curry._3(dropItemPrice, $$event, Caml_array.caml_array_get($$event.nativeEvent.dataTransfer.files, 0), i);
                                                          }),
                                                        disabled: state.showProgress || item.showDelete,
                                                        onClick: chooseFile,
                                                        onChange: (function ($$event) {
                                                            return Curry._2(uploadItemPrice, Caml_array.caml_array_get($$event.target.files, 0), i);
                                                          })
                                                      });
                                                  break;
                                              case "label" :
                                                  tmp$1 = React.createElement(Typography$BtsCore.make, {
                                                        variant: "subtitle2",
                                                        style: {
                                                          paddingRight: "6px",
                                                          paddingLeft: "6px"
                                                        },
                                                        noWrap: true,
                                                        children: item.priceValue
                                                      });
                                                  break;
                                              case "text" :
                                                  tmp$1 = React.createElement(TextFieldOutline$BtsCore.make, {
                                                        width: "50",
                                                        top: "0",
                                                        bottom: "0",
                                                        left: "0",
                                                        labelColor: "rgba(255,0,0,0.8)",
                                                        borderTop: "10",
                                                        borderBottom: "10",
                                                        enterBorderColor: "rgba(255,0,0,0.8)",
                                                        downBorderColor: "rgba(255,0,0,0.6)",
                                                        borderColor: "rgba(0,0,0,0.2)",
                                                        value: item.priceValue,
                                                        disabled: state.showProgress || item.showDelete,
                                                        onChange: (function ($$event) {
                                                            return Curry._2(changeItemPrice, $$event.target.value, i);
                                                          }),
                                                        children: item.priceTitle
                                                      });
                                                  break;
                                              case "textarea" :
                                                  tmp$1 = React.createElement(TextFieldOutline$BtsCore.make, {
                                                        top: "0",
                                                        bottom: "0",
                                                        left: "0",
                                                        labelColor: "rgba(255,0,0,0.8)",
                                                        borderTop: "10",
                                                        borderBottom: "10",
                                                        enterBorderColor: "rgba(255,0,0,0.8)",
                                                        downBorderColor: "rgba(255,0,0,0.6)",
                                                        borderColor: "rgba(0,0,0,0.2)",
                                                        value: item.priceValue,
                                                        disabled: state.showProgress || item.showDelete,
                                                        onChange: (function ($$event) {
                                                            return Curry._2(changeItemPrice, $$event.target.value, i);
                                                          }),
                                                        children: item.priceTitle
                                                      });
                                                  break;
                                              case "textline" :
                                                  tmp$1 = React.createElement(TextFieldMultiline$BtsCore.make, {
                                                        top: "0",
                                                        bottom: "0",
                                                        left: "0",
                                                        labelColor: "rgba(255,0,0,0.8)",
                                                        borderTop: "10",
                                                        borderBottom: "10",
                                                        enterBorderColor: "rgba(255,0,0,0.8)",
                                                        downBorderColor: "rgba(255,0,0,0.6)",
                                                        borderColor: "rgba(0,0,0,0.2)",
                                                        rows: 3,
                                                        value: item.priceValue,
                                                        disabled: state.showProgress || item.showDelete,
                                                        onChange: (function ($$event) {
                                                            return Curry._2(changeItemPrice, $$event.target.value, i);
                                                          }),
                                                        children: item.priceTitle
                                                      });
                                                  break;
                                              default:
                                                tmp$1 = React.createElement(React.Fragment, undefined, React.createElement(SelectOutline$BtsCore.make, {
                                                          top: "0",
                                                          bottom: "0",
                                                          left: "0",
                                                          labelColor: "rgba(255,0,0,0.8)",
                                                          tile: item.priceTitle,
                                                          enterBorderColor: "rgba(255,0,0,0.8)",
                                                          downBorderColor: "rgba(255,0,0,0.6)",
                                                          borderColor: "rgba(0,0,0,0.2)",
                                                          value: item.priceValue,
                                                          disabled: state.showProgress || item.showDelete,
                                                          onClick: (function (param) {
                                                              return Curry._1(showPriceMenu, i);
                                                            }),
                                                          children: /* tuple */[
                                                            item.showPriceMenu ? React.createElement(SelectMenu$BtsCore.make, {
                                                                    top: "50%",
                                                                    transform: "translate(0, -50%)",
                                                                    maxHeight: "280",
                                                                    minHeight: "0",
                                                                    topLeft: "12",
                                                                    topRight: "12",
                                                                    bottomRight: "12",
                                                                    bottomLeft: "12",
                                                                    paddingRight: "8",
                                                                    paddingLeft: "8",
                                                                    children: $$Array.map((function (priceitem) {
                                                                            return React.createElement(MenuItem$BtsCore.make, {
                                                                                        top: "0",
                                                                                        right: "8",
                                                                                        bottom: "0",
                                                                                        left: "8",
                                                                                        disablePadding: priceitem.optionPadding,
                                                                                        topLeft: "12",
                                                                                        topRight: "12",
                                                                                        bottomRight: "12",
                                                                                        bottomLeft: "12",
                                                                                        onClick: (function (param) {
                                                                                            return Curry._2(clickPriceMenu, priceitem.value, i);
                                                                                          }),
                                                                                        children: priceitem.value
                                                                                      });
                                                                          }), item.priceitems)
                                                                  }) : null,
                                                            React.createElement(IconGeneral$BtsCore.make, {
                                                                  animation: IconAnimation$BtsCore.topDownRorate(item.showPriceMenu),
                                                                  src: Icons$BtsCore.arrowDownBlack
                                                                })
                                                          ]
                                                        }), React.createElement(BackgroundBoard$BtsCore.make, {
                                                          showBackground: item.showPriceMenu,
                                                          backgroundColor: "transparent",
                                                          onClick: (function (param) {
                                                              return Curry._1(showPriceMenu, i);
                                                            })
                                                        }));
                                            }
                                          } else {
                                            tmp$1 = null;
                                          }
                                          var tmp$2;
                                          if (item.showAllergy) {
                                            var match$2 = item.allergyOutValue;
                                            switch (match$2) {
                                              case "image" :
                                                  tmp$2 = React.createElement(ImageUpload$BtsCore.make, {
                                                        webLoad: state.showProgress,
                                                        showDrop: item.showAllergyDrop,
                                                        showFile: item.showAllergyFile,
                                                        src: item.allergyValue,
                                                        fileRef: fileRef,
                                                        onDragOver: (function ($$event) {
                                                            return Curry._2(dragOverAllergy, $$event, i);
                                                          }),
                                                        onDragLeave: (function ($$event) {
                                                            return Curry._2(dragLeaveAllergy, $$event, i);
                                                          }),
                                                        onDrop: (function ($$event) {
                                                            return Curry._3(dropItemAllergy, $$event, Caml_array.caml_array_get($$event.nativeEvent.dataTransfer.files, 0), i);
                                                          }),
                                                        disabled: state.showProgress || item.showDelete,
                                                        onClick: chooseFile,
                                                        onChange: (function ($$event) {
                                                            return Curry._2(uploadItemAllergy, Caml_array.caml_array_get($$event.target.files, 0), i);
                                                          })
                                                      });
                                                  break;
                                              case "label" :
                                                  tmp$2 = React.createElement(Typography$BtsCore.make, {
                                                        variant: "subtitle2",
                                                        style: {
                                                          paddingRight: "6px",
                                                          paddingLeft: "6px"
                                                        },
                                                        noWrap: true,
                                                        children: item.allergyValue
                                                      });
                                                  break;
                                              case "text" :
                                                  tmp$2 = React.createElement(TextFieldOutline$BtsCore.make, {
                                                        width: "50",
                                                        top: "0",
                                                        bottom: "0",
                                                        left: "0",
                                                        labelColor: "rgba(255,0,0,0.8)",
                                                        borderTop: "10",
                                                        borderBottom: "10",
                                                        enterBorderColor: "rgba(255,0,0,0.8)",
                                                        downBorderColor: "rgba(255,0,0,0.6)",
                                                        borderColor: "rgba(0,0,0,0.2)",
                                                        value: item.allergyValue,
                                                        disabled: state.showProgress || item.showDelete,
                                                        onChange: (function ($$event) {
                                                            return Curry._2(changeItemAllergy, $$event.target.value, i);
                                                          }),
                                                        children: item.allergyTitle
                                                      });
                                                  break;
                                              case "textarea" :
                                                  tmp$2 = React.createElement(TextFieldOutline$BtsCore.make, {
                                                        top: "0",
                                                        bottom: "0",
                                                        left: "0",
                                                        labelColor: "rgba(255,0,0,0.8)",
                                                        borderTop: "10",
                                                        borderBottom: "10",
                                                        enterBorderColor: "rgba(255,0,0,0.8)",
                                                        downBorderColor: "rgba(255,0,0,0.6)",
                                                        borderColor: "rgba(0,0,0,0.2)",
                                                        value: item.allergyValue,
                                                        disabled: state.showProgress || item.showDelete,
                                                        onChange: (function ($$event) {
                                                            return Curry._2(changeItemAllergy, $$event.target.value, i);
                                                          }),
                                                        children: item.allergyTitle
                                                      });
                                                  break;
                                              case "textline" :
                                                  tmp$2 = React.createElement(TextFieldMultiline$BtsCore.make, {
                                                        top: "0",
                                                        bottom: "0",
                                                        left: "0",
                                                        labelColor: "rgba(255,0,0,0.8)",
                                                        borderTop: "10",
                                                        borderBottom: "10",
                                                        enterBorderColor: "rgba(255,0,0,0.8)",
                                                        downBorderColor: "rgba(255,0,0,0.6)",
                                                        borderColor: "rgba(0,0,0,0.2)",
                                                        rows: 3,
                                                        value: item.allergyValue,
                                                        disabled: state.showProgress || item.showDelete,
                                                        onChange: (function ($$event) {
                                                            return Curry._2(changeItemAllergy, $$event.target.value, i);
                                                          }),
                                                        children: item.allergyTitle
                                                      });
                                                  break;
                                              default:
                                                tmp$2 = React.createElement(React.Fragment, undefined, React.createElement(SelectOutline$BtsCore.make, {
                                                          top: "0",
                                                          bottom: "0",
                                                          left: "0",
                                                          labelColor: "rgba(255,0,0,0.8)",
                                                          tile: item.allergyTitle,
                                                          enterBorderColor: "rgba(255,0,0,0.8)",
                                                          downBorderColor: "rgba(255,0,0,0.6)",
                                                          borderColor: "rgba(0,0,0,0.2)",
                                                          value: item.allergyValue,
                                                          disabled: state.showProgress || item.showDelete,
                                                          onClick: (function (param) {
                                                              return Curry._1(showAllergyMenu, i);
                                                            }),
                                                          children: /* tuple */[
                                                            item.showAllergyMenu ? React.createElement(SelectMenu$BtsCore.make, {
                                                                    top: "50%",
                                                                    transform: "translate(0, -50%)",
                                                                    maxHeight: "280",
                                                                    minHeight: "0",
                                                                    topLeft: "12",
                                                                    topRight: "12",
                                                                    bottomRight: "12",
                                                                    bottomLeft: "12",
                                                                    paddingRight: "8",
                                                                    paddingLeft: "8",
                                                                    children: $$Array.map((function (allergyitem) {
                                                                            return React.createElement(MenuItem$BtsCore.make, {
                                                                                        top: "0",
                                                                                        right: "8",
                                                                                        bottom: "0",
                                                                                        left: "8",
                                                                                        disablePadding: allergyitem.optionPadding,
                                                                                        topLeft: "12",
                                                                                        topRight: "12",
                                                                                        bottomRight: "12",
                                                                                        bottomLeft: "12",
                                                                                        onClick: (function (param) {
                                                                                            return Curry._2(clickAllergyMenu, allergyitem.value, i);
                                                                                          }),
                                                                                        children: allergyitem.value
                                                                                      });
                                                                          }), item.allergyitems)
                                                                  }) : null,
                                                            React.createElement(IconGeneral$BtsCore.make, {
                                                                  animation: IconAnimation$BtsCore.topDownRorate(item.showAllergyMenu),
                                                                  src: Icons$BtsCore.arrowDownBlack
                                                                })
                                                          ]
                                                        }), React.createElement(BackgroundBoard$BtsCore.make, {
                                                          showBackground: item.showAllergyMenu,
                                                          backgroundColor: "transparent",
                                                          onClick: (function (param) {
                                                              return Curry._1(showAllergyMenu, i);
                                                            })
                                                        }));
                                            }
                                          } else {
                                            tmp$2 = null;
                                          }
                                          var tmp$3;
                                          if (item.showAlbum) {
                                            var match$3 = item.albumOutValue;
                                            switch (match$3) {
                                              case "image" :
                                                  tmp$3 = React.createElement(ImageUpload$BtsCore.make, {
                                                        webLoad: state.showProgress,
                                                        showDrop: item.showAlbumDrop,
                                                        showFile: item.showAlbumFile,
                                                        src: item.albumValue,
                                                        fileRef: fileRef,
                                                        onDragOver: (function ($$event) {
                                                            return Curry._2(dragOverAlbum, $$event, i);
                                                          }),
                                                        onDragLeave: (function ($$event) {
                                                            return Curry._2(dragLeaveAlbum, $$event, i);
                                                          }),
                                                        onDrop: (function ($$event) {
                                                            return Curry._3(dropItemAlbum, $$event, Caml_array.caml_array_get($$event.nativeEvent.dataTransfer.files, 0), i);
                                                          }),
                                                        disabled: state.showProgress || item.showDelete,
                                                        onClick: chooseFile,
                                                        onChange: (function ($$event) {
                                                            return Curry._2(uploadItemAlbum, Caml_array.caml_array_get($$event.target.files, 0), i);
                                                          })
                                                      });
                                                  break;
                                              case "label" :
                                                  tmp$3 = React.createElement(Typography$BtsCore.make, {
                                                        variant: "subtitle2",
                                                        style: {
                                                          paddingRight: "6px",
                                                          paddingLeft: "6px"
                                                        },
                                                        noWrap: true,
                                                        children: item.albumValue
                                                      });
                                                  break;
                                              case "text" :
                                                  tmp$3 = React.createElement(TextFieldOutline$BtsCore.make, {
                                                        width: "50",
                                                        top: "0",
                                                        bottom: "0",
                                                        left: "0",
                                                        labelColor: "rgba(255,0,0,0.8)",
                                                        borderTop: "10",
                                                        borderBottom: "10",
                                                        enterBorderColor: "rgba(255,0,0,0.8)",
                                                        downBorderColor: "rgba(255,0,0,0.6)",
                                                        borderColor: "rgba(0,0,0,0.2)",
                                                        value: item.albumValue,
                                                        disabled: state.showProgress || item.showDelete,
                                                        onChange: (function ($$event) {
                                                            return Curry._2(changeItemAlbum, $$event.target.value, i);
                                                          }),
                                                        children: item.albumTitle
                                                      });
                                                  break;
                                              case "textarea" :
                                                  tmp$3 = React.createElement(TextFieldOutline$BtsCore.make, {
                                                        top: "0",
                                                        bottom: "0",
                                                        left: "0",
                                                        labelColor: "rgba(255,0,0,0.8)",
                                                        borderTop: "10",
                                                        borderBottom: "10",
                                                        enterBorderColor: "rgba(255,0,0,0.8)",
                                                        downBorderColor: "rgba(255,0,0,0.6)",
                                                        borderColor: "rgba(0,0,0,0.2)",
                                                        value: item.albumValue,
                                                        disabled: state.showProgress || item.showDelete,
                                                        onChange: (function ($$event) {
                                                            return Curry._2(changeItemAlbum, $$event.target.value, i);
                                                          }),
                                                        children: item.albumTitle
                                                      });
                                                  break;
                                              case "textline" :
                                                  tmp$3 = React.createElement(TextFieldMultiline$BtsCore.make, {
                                                        top: "0",
                                                        bottom: "0",
                                                        left: "0",
                                                        labelColor: "rgba(255,0,0,0.8)",
                                                        borderTop: "10",
                                                        borderBottom: "10",
                                                        enterBorderColor: "rgba(255,0,0,0.8)",
                                                        downBorderColor: "rgba(255,0,0,0.6)",
                                                        borderColor: "rgba(0,0,0,0.2)",
                                                        rows: 3,
                                                        value: item.albumValue,
                                                        disabled: state.showProgress || item.showDelete,
                                                        onChange: (function ($$event) {
                                                            return Curry._2(changeItemAlbum, $$event.target.value, i);
                                                          }),
                                                        children: item.albumTitle
                                                      });
                                                  break;
                                              default:
                                                tmp$3 = React.createElement(React.Fragment, undefined, React.createElement(SelectOutline$BtsCore.make, {
                                                          top: "0",
                                                          bottom: "0",
                                                          left: "0",
                                                          labelColor: "rgba(255,0,0,0.8)",
                                                          tile: item.albumTitle,
                                                          enterBorderColor: "rgba(255,0,0,0.8)",
                                                          downBorderColor: "rgba(255,0,0,0.6)",
                                                          borderColor: "rgba(0,0,0,0.2)",
                                                          value: item.albumValue,
                                                          disabled: state.showProgress || item.showDelete,
                                                          onClick: (function (param) {
                                                              return Curry._1(showAlbumMenu, i);
                                                            }),
                                                          children: /* tuple */[
                                                            item.showAlbumMenu ? React.createElement(SelectMenu$BtsCore.make, {
                                                                    top: "50%",
                                                                    transform: "translate(0, -50%)",
                                                                    maxHeight: "280",
                                                                    minHeight: "0",
                                                                    topLeft: "12",
                                                                    topRight: "12",
                                                                    bottomRight: "12",
                                                                    bottomLeft: "12",
                                                                    paddingRight: "8",
                                                                    paddingLeft: "8",
                                                                    children: $$Array.map((function (albumitem) {
                                                                            return React.createElement(MenuItem$BtsCore.make, {
                                                                                        top: "0",
                                                                                        right: "8",
                                                                                        bottom: "0",
                                                                                        left: "8",
                                                                                        disablePadding: albumitem.optionPadding,
                                                                                        topLeft: "12",
                                                                                        topRight: "12",
                                                                                        bottomRight: "12",
                                                                                        bottomLeft: "12",
                                                                                        onClick: (function (param) {
                                                                                            return Curry._2(clickAlbumMenu, albumitem.value, i);
                                                                                          }),
                                                                                        children: albumitem.value
                                                                                      });
                                                                          }), item.albumitems)
                                                                  }) : null,
                                                            React.createElement(IconGeneral$BtsCore.make, {
                                                                  animation: IconAnimation$BtsCore.topDownRorate(item.showAlbumMenu),
                                                                  src: Icons$BtsCore.arrowDownBlack
                                                                })
                                                          ]
                                                        }), React.createElement(BackgroundBoard$BtsCore.make, {
                                                          showBackground: item.showAlbumMenu,
                                                          backgroundColor: "transparent",
                                                          onClick: (function (param) {
                                                              return Curry._1(showAlbumMenu, i);
                                                            })
                                                        }));
                                            }
                                          } else {
                                            tmp$3 = null;
                                          }
                                          var tmp$4;
                                          if (item.showRemark) {
                                            var match$4 = item.remarkOutValue;
                                            switch (match$4) {
                                              case "image" :
                                                  tmp$4 = React.createElement(ImageUpload$BtsCore.make, {
                                                        webLoad: state.showProgress,
                                                        showDrop: item.showRemarkDrop,
                                                        showFile: item.showRemarkFile,
                                                        src: item.remarkValue,
                                                        fileRef: fileRef,
                                                        onDragOver: (function ($$event) {
                                                            return Curry._2(dragOverRemark, $$event, i);
                                                          }),
                                                        onDragLeave: (function ($$event) {
                                                            return Curry._2(dragLeaveRemark, $$event, i);
                                                          }),
                                                        onDrop: (function ($$event) {
                                                            return Curry._3(dropItemRemark, $$event, Caml_array.caml_array_get($$event.nativeEvent.dataTransfer.files, 0), i);
                                                          }),
                                                        disabled: state.showProgress || item.showDelete,
                                                        onClick: chooseFile,
                                                        onChange: (function ($$event) {
                                                            return Curry._2(uploadItemRemark, Caml_array.caml_array_get($$event.target.files, 0), i);
                                                          })
                                                      });
                                                  break;
                                              case "label" :
                                                  tmp$4 = React.createElement(Typography$BtsCore.make, {
                                                        variant: "subtitle2",
                                                        style: {
                                                          paddingRight: "6px",
                                                          paddingLeft: "6px"
                                                        },
                                                        noWrap: true,
                                                        children: item.remarkValue
                                                      });
                                                  break;
                                              case "text" :
                                                  tmp$4 = React.createElement(TextFieldOutline$BtsCore.make, {
                                                        width: "50",
                                                        top: "0",
                                                        bottom: "0",
                                                        left: "0",
                                                        labelColor: "rgba(255,0,0,0.8)",
                                                        borderTop: "10",
                                                        borderBottom: "10",
                                                        enterBorderColor: "rgba(255,0,0,0.8)",
                                                        downBorderColor: "rgba(255,0,0,0.6)",
                                                        borderColor: "rgba(0,0,0,0.2)",
                                                        value: item.remarkValue,
                                                        disabled: state.showProgress || item.showDelete,
                                                        onChange: (function ($$event) {
                                                            return Curry._2(changeItemRemark, $$event.target.value, i);
                                                          }),
                                                        children: item.remarkTitle
                                                      });
                                                  break;
                                              case "textarea" :
                                                  tmp$4 = React.createElement(TextFieldOutline$BtsCore.make, {
                                                        top: "0",
                                                        bottom: "0",
                                                        left: "0",
                                                        labelColor: "rgba(255,0,0,0.8)",
                                                        borderTop: "10",
                                                        borderBottom: "10",
                                                        enterBorderColor: "rgba(255,0,0,0.8)",
                                                        downBorderColor: "rgba(255,0,0,0.6)",
                                                        borderColor: "rgba(0,0,0,0.2)",
                                                        value: item.remarkValue,
                                                        disabled: state.showProgress || item.showDelete,
                                                        onChange: (function ($$event) {
                                                            return Curry._2(changeItemRemark, $$event.target.value, i);
                                                          }),
                                                        children: item.remarkTitle
                                                      });
                                                  break;
                                              case "textline" :
                                                  tmp$4 = React.createElement(TextFieldMultiline$BtsCore.make, {
                                                        top: "0",
                                                        bottom: "0",
                                                        left: "0",
                                                        labelColor: "rgba(255,0,0,0.8)",
                                                        borderTop: "10",
                                                        borderBottom: "10",
                                                        enterBorderColor: "rgba(255,0,0,0.8)",
                                                        downBorderColor: "rgba(255,0,0,0.6)",
                                                        borderColor: "rgba(0,0,0,0.2)",
                                                        rows: 3,
                                                        value: item.remarkValue,
                                                        disabled: state.showProgress || item.showDelete,
                                                        onChange: (function ($$event) {
                                                            return Curry._2(changeItemRemark, $$event.target.value, i);
                                                          }),
                                                        children: item.remarkTitle
                                                      });
                                                  break;
                                              default:
                                                tmp$4 = React.createElement(React.Fragment, undefined, React.createElement(SelectOutline$BtsCore.make, {
                                                          top: "0",
                                                          bottom: "0",
                                                          left: "0",
                                                          labelColor: "rgba(255,0,0,0.8)",
                                                          tile: item.remarkTitle,
                                                          enterBorderColor: "rgba(255,0,0,0.8)",
                                                          downBorderColor: "rgba(255,0,0,0.6)",
                                                          borderColor: "rgba(0,0,0,0.2)",
                                                          value: item.remarkValue,
                                                          disabled: state.showProgress || item.showDelete,
                                                          onClick: (function (param) {
                                                              return Curry._1(showRemarkMenu, i);
                                                            }),
                                                          children: /* tuple */[
                                                            item.showRemarkMenu ? React.createElement(SelectMenu$BtsCore.make, {
                                                                    top: "50%",
                                                                    transform: "translate(0, -50%)",
                                                                    maxHeight: "280",
                                                                    minHeight: "0",
                                                                    topLeft: "12",
                                                                    topRight: "12",
                                                                    bottomRight: "12",
                                                                    bottomLeft: "12",
                                                                    paddingRight: "8",
                                                                    paddingLeft: "8",
                                                                    children: $$Array.map((function (remarkitem) {
                                                                            return React.createElement(MenuItem$BtsCore.make, {
                                                                                        top: "0",
                                                                                        right: "8",
                                                                                        bottom: "0",
                                                                                        left: "8",
                                                                                        disablePadding: remarkitem.optionPadding,
                                                                                        topLeft: "12",
                                                                                        topRight: "12",
                                                                                        bottomRight: "12",
                                                                                        bottomLeft: "12",
                                                                                        onClick: (function (param) {
                                                                                            return Curry._2(clickRemarkMenu, remarkitem.value, i);
                                                                                          }),
                                                                                        children: remarkitem.value
                                                                                      });
                                                                          }), item.remarkitems)
                                                                  }) : null,
                                                            React.createElement(IconGeneral$BtsCore.make, {
                                                                  animation: IconAnimation$BtsCore.topDownRorate(item.showRemarkMenu),
                                                                  src: Icons$BtsCore.arrowDownBlack
                                                                })
                                                          ]
                                                        }), React.createElement(BackgroundBoard$BtsCore.make, {
                                                          showBackground: item.showRemarkMenu,
                                                          backgroundColor: "transparent",
                                                          onClick: (function (param) {
                                                              return Curry._1(showRemarkMenu, i);
                                                            })
                                                        }));
                                            }
                                          } else {
                                            tmp$4 = null;
                                          }
                                          return React.createElement(GridItem$BtsCore.make, {
                                                      right: "24",
                                                      bottom: "0",
                                                      left: "24",
                                                      xs: "auto",
                                                      children: React.createElement(GridContainer$BtsCore.make, {
                                                            direction: "column",
                                                            justify: "center",
                                                            alignItem: "stretch",
                                                            children: null
                                                          }, React.createElement(GridItem$BtsCore.make, {
                                                                right: "0",
                                                                left: "0",
                                                                xs: "auto",
                                                                children: React.createElement(GridContainer$BtsCore.make, {
                                                                      direction: "row",
                                                                      justify: "center",
                                                                      alignItem: "center",
                                                                      children: null
                                                                    }, React.createElement(GridItem$BtsCore.make, {
                                                                          top: "0",
                                                                          right: "0",
                                                                          bottom: "0",
                                                                          left: "0",
                                                                          xs: "auto",
                                                                          children: tmp
                                                                        }), React.createElement(GridItem$BtsCore.make, {
                                                                          top: "0",
                                                                          right: "0",
                                                                          bottom: "0",
                                                                          left: "0",
                                                                          xs: "no",
                                                                          children: tmp$1
                                                                        }), React.createElement(GridItem$BtsCore.make, {
                                                                          style: {
                                                                            position: "relative"
                                                                          },
                                                                          top: "0",
                                                                          right: "0",
                                                                          bottom: "0",
                                                                          left: "0",
                                                                          enterBorderWidth: "0",
                                                                          borderWidth: "0",
                                                                          xs: "no",
                                                                          children: null
                                                                        }, React.createElement(IconButton$BtsCore.make, {
                                                                              padding: "6",
                                                                              onClick: (function (param) {
                                                                                  return Curry._1(showMenuForm, i);
                                                                                }),
                                                                              children: null
                                                                            }, React.createElement(Tooltip$BtsCore.make, {
                                                                                  location: "bottom",
                                                                                  backgroundColor: "rgba(255,0,0,0.8)",
                                                                                  children: React.createElement(ReactIntl.FormattedMessage, {
                                                                                        id: "more",
                                                                                        defaultMessage: "More"
                                                                                      })
                                                                                }), React.createElement(IconAction$BtsCore.make, {
                                                                                  animation: "leftRight",
                                                                                  src: Icons$BtsCore.moreVertBlack
                                                                                })), item.showMore ? React.createElement(React.Fragment, undefined, React.createElement(SelectMenu$BtsCore.make, {
                                                                                    right: "0",
                                                                                    transform: "translate(0, -25%)",
                                                                                    maxWidth: "344",
                                                                                    width: "344",
                                                                                    topLeft: "12",
                                                                                    topRight: "12",
                                                                                    bottomRight: "12",
                                                                                    bottomLeft: "12",
                                                                                    paddingRight: "8",
                                                                                    paddingLeft: "8",
                                                                                    children: null
                                                                                  }, React.createElement(MenuItem$BtsCore.make, {
                                                                                        top: "0",
                                                                                        right: "8",
                                                                                        bottom: "0",
                                                                                        left: "8",
                                                                                        topLeft: "12",
                                                                                        topRight: "12",
                                                                                        bottomRight: "12",
                                                                                        bottomLeft: "12",
                                                                                        children: React.createElement(GridContainer$BtsCore.make, {
                                                                                              backgroundColor: "transparent",
                                                                                              direction: "row",
                                                                                              justify: "start",
                                                                                              alignItem: "center",
                                                                                              children: null
                                                                                            }, React.createElement(GridItem$BtsCore.make, {
                                                                                                  style: {
                                                                                                    height: "28px"
                                                                                                  },
                                                                                                  top: "0",
                                                                                                  bottom: "0",
                                                                                                  left: "0",
                                                                                                  enterBackgroundColor: "transparent",
                                                                                                  backgroundColor: "transparent",
                                                                                                  xs: "no",
                                                                                                  children: React.createElement(IconAction$BtsCore.make, {
                                                                                                        width: "28",
                                                                                                        height: "28",
                                                                                                        animation: "leftRight",
                                                                                                        src: Icons$BtsCore.fileCopyBlack
                                                                                                      })
                                                                                                }), React.createElement(GridItem$BtsCore.make, {
                                                                                                  top: "0",
                                                                                                  right: "0",
                                                                                                  bottom: "0",
                                                                                                  left: "0",
                                                                                                  enterBackgroundColor: "transparent",
                                                                                                  backgroundColor: "transparent",
                                                                                                  xs: "no",
                                                                                                  children: React.createElement(Typography$BtsCore.make, {
                                                                                                        variant: "subheading",
                                                                                                        children: React.createElement(ReactIntl.FormattedMessage, {
                                                                                                              id: "copy",
                                                                                                              defaultMessage: "Copy"
                                                                                                            })
                                                                                                      })
                                                                                                }))
                                                                                      }), React.createElement(MenuItem$BtsCore.make, {
                                                                                        top: "0",
                                                                                        right: "8",
                                                                                        bottom: "0",
                                                                                        left: "8",
                                                                                        topLeft: "12",
                                                                                        topRight: "12",
                                                                                        bottomRight: "12",
                                                                                        bottomLeft: "12",
                                                                                        onClick: (function (param) {
                                                                                            return Curry._1(deleteMenuForm, i);
                                                                                          }),
                                                                                        children: React.createElement(GridContainer$BtsCore.make, {
                                                                                              backgroundColor: "transparent",
                                                                                              direction: "row",
                                                                                              justify: "start",
                                                                                              alignItem: "center",
                                                                                              children: null
                                                                                            }, React.createElement(GridItem$BtsCore.make, {
                                                                                                  style: {
                                                                                                    height: "28px"
                                                                                                  },
                                                                                                  top: "0",
                                                                                                  bottom: "0",
                                                                                                  left: "0",
                                                                                                  enterBackgroundColor: "transparent",
                                                                                                  backgroundColor: "transparent",
                                                                                                  xs: "no",
                                                                                                  children: React.createElement(IconAction$BtsCore.make, {
                                                                                                        width: "28",
                                                                                                        height: "28",
                                                                                                        animation: "leftRight",
                                                                                                        src: item.showDelete ? Icons$BtsCore.refreshBlack : Icons$BtsCore.clearWarn
                                                                                                      })
                                                                                                }), React.createElement(GridItem$BtsCore.make, {
                                                                                                  top: "0",
                                                                                                  right: "0",
                                                                                                  bottom: "0",
                                                                                                  left: "0",
                                                                                                  enterBackgroundColor: "transparent",
                                                                                                  backgroundColor: "transparent",
                                                                                                  xs: "no",
                                                                                                  children: React.createElement(Typography$BtsCore.make, {
                                                                                                        variant: "subheading",
                                                                                                        children: item.showDelete ? React.createElement(ReactIntl.FormattedMessage, {
                                                                                                                id: "refresh",
                                                                                                                defaultMessage: "Refresh"
                                                                                                              }) : React.createElement(ReactIntl.FormattedMessage, {
                                                                                                                id: "deleted",
                                                                                                                defaultMessage: "Deleted"
                                                                                                              })
                                                                                                      })
                                                                                                }))
                                                                                      })), React.createElement(BackgroundBoard$BtsCore.make, {
                                                                                    showBackground: item.showMore,
                                                                                    backgroundColor: "transparent",
                                                                                    onClick: (function (param) {
                                                                                        return Curry._1(showMenuForm, i);
                                                                                      })
                                                                                  })) : null))
                                                              }), React.createElement(GridItem$BtsCore.make, {
                                                                right: "0",
                                                                left: "0",
                                                                xs: "auto",
                                                                children: tmp$2
                                                              }), React.createElement(GridItem$BtsCore.make, {
                                                                right: "0",
                                                                left: "0",
                                                                xs: "auto",
                                                                children: tmp$3
                                                              }), React.createElement(GridItem$BtsCore.make, {
                                                                right: "0",
                                                                left: "0",
                                                                xs: "auto",
                                                                children: tmp$4
                                                              }))
                                                    });
                                        }), state.items)) : React.createElement(GridItem$BtsCore.make, {
                                    top: "0",
                                    right: "24",
                                    bottom: "0",
                                    left: "24",
                                    xs: "auto",
                                    children: React.createElement(Paper$BtsCore.make, {
                                          style: Object.assign(({}), Together$BtsCore.cursorPointer, {
                                                maxHeight: maxHeight,
                                                minHeight: maxHeight,
                                                position: "relative"
                                              }),
                                          top: "0",
                                          bottom: "0",
                                          onClick: addMenuItem,
                                          children: React.createElement("div", {
                                                style: {
                                                  position: "absolute",
                                                  right: "50%",
                                                  top: "50%",
                                                  transform: "translate(50%, -50%)"
                                                }
                                              }, state.showItem ? React.createElement(Typography$BtsCore.make, {
                                                      variant: "tile",
                                                      color: "rgba(255,0,0,0.8)",
                                                      noWrap: true,
                                                      children: React.createElement(ReactIntl.FormattedMessage, {
                                                            id: "Carte.firstMenu",
                                                            defaultMessage: "firstMenu"
                                                          })
                                                    }) : React.createElement(ProgressCircular$BtsCore.make, {
                                                      size: "80"
                                                    }))
                                        })
                                  }), React.createElement(GridItem$BtsCore.make, {
                                  right: "24",
                                  left: "24",
                                  xs: "auto",
                                  children: React.createElement(Button$BtsCore.make, {
                                        enterBackgroundColor: "rgba(255,0,0,0.6)",
                                        backgroundColor: "rgba(255,0,0,0.8)",
                                        width: "100%",
                                        size: "large",
                                        disabled: state.showProgress,
                                        onClick: insertForm,
                                        children: React.createElement(ReactIntl.FormattedMessage, {
                                              id: "save",
                                              defaultMessage: "Save"
                                            })
                                      })
                                }))
                      })
                }), React.createElement(SnackbarYoutube$BtsCore.make, {
                  showYoutube: state.showYoutube,
                  position: "bottomLeft",
                  children: /* tuple */[
                    React.createElement("span", undefined, state.youtubeText),
                    null
                  ]
                }));
}

var make = Carte;

export {
  reducer ,
  initialState ,
  make ,
  
}
/*  Not a pure module */
